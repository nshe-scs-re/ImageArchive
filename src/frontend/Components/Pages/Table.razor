@page "/table"
@rendermode InteractiveServer
@inject HttpClient Http
@inject HttpService HttpService
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Table</PageTitle>

<div class="d-flex justify-content-center m-3">
  <EditForm Model="@imageQuery" OnValidSubmit="@SubmitForm" FormName="MyFormName" class="m-3">
    <div class="row mb-3">
      <label for="StartDate" class="col col-form-label">Query start date:</label>
      <div class="col">
         <InputDate id="StartDate" @bind-Value="imageQuery.StartDateTime" class="form-control"/>
      </div>
    </div>
    <div class="row mb-3">
      <label for="EndDate" class="col col-form-label">Query end date:</label>
      <div class="col">
         <InputDate id="EndDate" @bind-Value="imageQuery.EndDateTime" class="form-control" />
      </div>
    </div>
    <button type="submit" class="btn btn-primary">Search</button>
  </EditForm>
</div>

<div class="grid">
  <QuickGrid Items="@images.AsQueryable()" Pagination="@pagination"  Class="table table-bordered table-striped table-hover">
    <PropertyColumn Property="@(i => i.Id)" Sortable="true" Align="Align.Right" Title="Id"></PropertyColumn>
    <PropertyColumn Property="@(i => i.FilePath)" Sortable="true" Align="Align.Right" Title="File Path"></PropertyColumn>
    <PropertyColumn Property="@(i => i.DateTime)" Sortable="true" Align="Align.Right" Title="Date Time"></PropertyColumn>
    <PropertyColumn Property="@(i => i.UnixTime)" Sortable="true" Align="Align.Right" Title="Unix Time"></PropertyColumn>
  </QuickGrid>
</div>

<Paginator State="@pagination" />

<div class="page-size-chooser">
  Items per page:
  <select @bind="@pagination.ItemsPerPage">
    <option>10</option>
    <option>20</option>
    <option>50</option>
  </select>
</div>

@code {
    ImageQuery imageQuery = new ImageQuery()
    {
        StartDateTime = new DateTime(2010, 1, 1),
        EndDateTime = DateTime.Now
    };

    private List<Image> images = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override void OnInitialized()
    {
    
    }

    private async Task SubmitForm()
    {
        var response = await HttpService.GetImagesAllAsync();

        if(response.IsSuccessStatusCode)
        {
          images = await response.Content.ReadFromJsonAsync<List<Image>>();
        }
    }
}
