@page "/privacy"
@using System
@using System.Collections.Generic
@using System.Text.RegularExpressions

<h1 class="h1 text-center m-3">Privacy Policy</h1>

<!-- Search Bar -->
<div class="input-group p-3">
    <input type="text" class="form-control" @bind-value="searchQuery" @bind-value:event="oninput" placeholder="Search Privacy Policy..." @onkeypress="@(e => { if (e.Key == "Enter") SearchPolicy(); })" />
    <button type="button" class="btn" @onclick="SearchPolicy">Search</button>
</div>

<!-- Display Search Results -->
@if (searchResults.Count > 0)
{
    <div class="shadow rounded m-3 p-3">
        <button type="button" class="btn-close float-end" aria-label="Close" @onclick="ClearSearchResults"></button>
        <h3 class="h3 text-center m-3">Search Results:</h3>
        @foreach (var result in searchResults)
        {
            <p>@(new MarkupString(result))</p>
        }
    </div>
}
else if (searchPerformed && !string.IsNullOrWhiteSpace(searchQuery))
{
    <p>No results found for "<b>@searchQuery</b>".</p>
}

<!-- Display Full Policy -->
@foreach (var section in Sections)
{
    <h2 class="h2 text-center m-3">@(section)</h2>
    <p>@PolicyDetails[section]</p>
}

@code {
    private bool searchPerformed = false;
    // List of sections in the Privacy Policy
    private List<string> Sections = new List<string>
    {
        "Introduction",
        "Scope of Policy",
        "Data Collection",
        "Types of Data Collected",
        "Purpose of Data Collection",
        "Data Usage in Research and Analysis",
        "User Consent",
        "Data Security and Storage",
        "Data Retention",
        "Data Sharing and Disclosure",
        "User Rights and Data Control",
        "Cookies and Tracking Technologies",
        "Third-Party Integrations",
        "External Links",
        "Data Access and Account Authentication",
        "Children’s Privacy",
        "Changes to Privacy Policy",
        "Contact Information"
    };

    // Detailed information for each section
    private Dictionary<string, string> PolicyDetails;

    private string lorem5 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ultrices aptent sociosqu cras praesent libero hac sociosqu eros fusce elementum dolor tellus tortor ligula dui. Curae aenean fames ipsum condimentum lectus non sociosqu neque eget sit tellus condimentum hendrerit. Senectus cubilia commodo consequat nunc diam mollis quisque dui sociosqu. Torquent sed mi curabitur leo fringilla commodo luctus congue torquent varius platea taciti sociosqu enim justo.";

    public Privacy()
    {
        PolicyDetails = new Dictionary<string, string>
        {
            { "Introduction", lorem5 },

            { "Scope of Policy", lorem5 },

            { "Data Collection", lorem5 },

            { "Types of Data Collected", lorem5 },

            { "Purpose of Data Collection", lorem5 },

            { "Data Usage in Research and Analysis", lorem5 },

            { "User Consent", lorem5 },

            { "Data Security and Storage", lorem5 },

            { "Data Retention", lorem5 },

            { "Data Sharing and Disclosure", lorem5 },

            { "User Rights and Data Control", lorem5 },

            { "Cookies and Tracking Technologies", lorem5 },

            { "Third-Party Integrations", lorem5 },

            { "External Links", lorem5 },

            { "Data Access and Account Authentication", lorem5 },

            { "Children’s Privacy", lorem5 },

            { "Changes to Privacy Policy", lorem5 },

            { "Contact Information", lorem5 }
        };
    }

    private string searchQuery = string.Empty;
    private List<string> searchResults = new List<string>();

    // Search function to locate sections containing the search term
    private void SearchPolicy()
    {
        searchPerformed = true;
        searchResults.Clear();
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            foreach (var section in Sections)
            {
                if (PolicyDetails.ContainsKey(section))
                {
                    string content = PolicyDetails[section];
                    if (content.IndexOf(searchQuery, StringComparison.OrdinalIgnoreCase) >= 0)
                    {
                        string highlightedContent = HighlightSearchTerms(content, searchQuery);
                        searchResults.Add($"<b>{section}:</b><br>{highlightedContent}");
                    }
                }
            }
        }
    }

    private void ClearSearchResults()
    {
        searchResults.Clear();
        searchQuery = string.Empty;
        searchPerformed = false;
    }

    // Method to highlight search terms within the policy content
    private string HighlightSearchTerms(string content, string searchTerm)
    {
        return Regex.Replace(content, $"({Regex.Escape(searchTerm)})", "<mark>$1</mark>", RegexOptions.IgnoreCase);
    }

    private int GetCurrentYear() => DateTime.Now.Year;
}