@page "/search"
@attribute [Authorize]
@inject HttpService HttpService
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime

<PageTitle>Search Tool</PageTitle>

<div class="row custom-body-content-wrapper">
    <div class="col">
        <div class="accordion accordion-flush py-3">
            <div class="accordion-item py-3">
                <div class="row">
                    <div class="col-lg-6 col-md-8 mx-auto">
                        <div class="accordion-header py-3">
                            <button class="accordion-button accordion-item rounded" type="button" data-bs-toggle="collapse" data-bs-target="#QueryFormContainer" @onclick="OnAccordionToggled">
                            <h1 class="h1 w-100 text-center">Image Repository Search</h1>
                            <span class="p-2">@(accordionIsCollapsed ? "Expand" : "Collapse")</span>
                            </button>
                        </div>
                    </div>
                </div>
                <div id="QueryFormContainer" class="accordion-collapse collapse show row row-cols-1 row-cols-md-2 row-cols-lg-3 py-2">
                    <div class="accordion-body col mx-auto border">
                        <p class="lead text-center fw-normal">Execute a query against the image repository by filling the form below.</p>
                        <EditForm Model="@imageQuery" OnValidSubmit="HandleSubmit" FormName="ImageQueryForm" class="form">
                            <div class="row py-2">
                                <label for="StartDateTime" class="col col-form-label">Start date:</label>
                                <div class="col">
                                    <InputDate id="StartDateTime" @bind-Value="imageQuery.StartDateTime" Type="InputDateType.DateTimeLocal" class="form-control" />
                                </div>
                            </div>
                            <div class="row py-2">
                                <label for="EndDateTime" class="col col-form-label">End date:</label>
                                <div class="col">
                                    <InputDate id="EndDateTime" @bind-Value="imageQuery.EndDateTime" Type="InputDateType.DateTimeLocal" class="form-control" />
                                </div>
                            </div>
                            <div class="row py-2">
                                <label for="SiteName" class="col col-form-label">Site Name:</label>
                                <div class="col">
                                    <InputSelect @bind-Value="SiteName" class="form-select">
                                        @foreach (var siteName in siteNames)
                                        {
                                            <option value="@siteName">@siteName</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="row py-2">
                                <label for="SiteNumber" class="col col-form-label">Site Number:</label>
                                <div class="col">
                                    <InputSelect @bind-Value="SiteNumber" class="form-select">
                                        @foreach (var siteNumber in siteNumbers)
                                        {
                                            <option value="@siteNumber">@siteNumber</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="row py-2">
                                <label for="CameraPosition" class="col col-form-label">Camera Position:</label>
                                <div class="col">
                                    <InputSelect @bind-Value="CameraPositionNumber" class="form-select">
                                        @foreach (var cameraNumber in cameraPositionNumbers)
                                        {
                                            <option value="@cameraNumber">@GetCameraPositionName(SiteName!, (int)SiteNumber!, cameraNumber)</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="row py-2 align-items-center">
                                <label class="col-8 col-form-label">Show extended information:</label>
                                <div class="col-4 d-flex justify-content-end">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" @bind="showExtendedImageInformation">
                                    </div>
                                </div>
                            </div>
                            <div class="text-end py-2">
                                <button type="submit" class="btn rounded custom-btn-fixed-size-sm" data-bs-toggle="collapse" data-bs-target="#QueryFormContainer" @onclick="OnAccordionToggled">Search</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>

        @if (searchState is SearchState.Loading)
        {
            <div class="my-3 py-3 album rounded">
                <div class="container">
                    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                        @for (int i = 0; i < pageSize; i++)
                        {
                            <div class="col">
                                <div class="card shadow-sm">
                                    <figure class="custom-card-placeholder"></figure>
                                    <div class="card-body">
                                        @if (showExtendedImageInformation)
                                        {
                                            <p class="card-text">Time: </p>
                                            <p class="card-text">Site Name: </p>
                                            <p class="card-text">Site Number: </p>
                                            <p class="card-text">Camera Number: </p>
                                            <p class="card-text">Camera Position Number: </p>
                                            <p class="card-text">Camera Position Name: </p>
                                        }
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="btn-group">
                                                <button type="button" class="disabled btn btn-sm" disabled>View</button>
                                                <button type="button" class="disabled btn btn-sm" disabled>Download</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (searchState is SearchState.Loaded)
        {
            <div class="my-3 py-3 album rounded">
                <div class="container">
                    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                        @foreach (var image in images!)
                        {
                            <div class="col">
                                <div class="card shadow-sm">
                                    <img src="/proxy/images/@image.Id" class="card-img-top" />
                                    <div class="card-body">
                                        @if (showExtendedImageInformation)
                                        {
                                            <p class="card-text">Time: @image.DateTime</p>
                                            <p class="card-text">Site Name: @image.SiteName</p>
                                            <p class="card-text">Site Number: @image.SiteNumber</p>
                                            <p class="card-text">Camera Position Number: @image.CameraPositionNumber</p>
                                            <p class="card-text">Camera Position Name: @image.CameraPositionName</p>
                                        }
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-sm" @onclick="() => UpdateModalImageSrc(image.Id)" data-bs-toggle="modal" data-bs-target="#view-image-modal">View</button>
                                                <button type="button" class="btn btn-sm" @onclick="() => DownloadImage(image)">Download</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div>
                <ul class="pagination justify-content-center">
                    <li class="page-item @(pageIndex==1 ? "disabled" : "")">
                        <button type="button" class="page-link" @onclick="FirstPage">
                            <i class="bi bi-chevron-bar-left"></i>
                        </button>
                    </li>
                    <li class="page-item">
                        <button type="button" class="page-link" @onclick="PreviousPage">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                    </li>
                    <li class="page-item">
                        <input type="number" min="0" max="@totalPages" class="page-link text-center" value="@pageIndex" @onchange="UpdatePaginationAsync" />
                    </li>
                    <li class="page-item">
                        <button type="button" class="page-link" @onclick="NextPage">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </li>
                    <li class="page-item @(pageIndex==totalPages ? "disabled" : "")">
                        <button type="button" class="page-link" @onclick="LastPage">
                            <i class="bi bi-chevron-bar-right"></i>
                        </button>
                    </li>
                </ul>
            </div>

        }
    </div>
</div>
<div class="row">
    <div class="col">
        @if(searchState is not SearchState.NotSubmitted)
        {
            @switch (archiveRequest.Status)
            {
                case ArchiveStatus.None:
                    <div class="text-center m-3">
                        <div>
                            <p>Images found: @totalImages</p>
                        </div>
                        <button type="button" class="btn btn-md" @onclick="DownloadSearchResultsAsArchive">
                            <i class="bi bi-download mx-1"></i> Download Search Results
                        </button>
                    </div>
                    break;

                case ArchiveStatus.Pending:
                    <div class="d-flex justify-content-center m-3">
                        <span class="spinner-grow"></span>
                    </div>
                    break;

                case ArchiveStatus.Processing:
                    <div class="text-center">
                        <p>Your query results are being archived and will be ready for download shortly. Please don't navigate away.</p>
                    </div>
                    <div class="progress m-3">
                        <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated bg-primary" role="progressbar" style=@GetProgressBarWidth()></div>
                    </div>
                    <div class="text-center">
                        <p>Elapsed Archiving Time: @elapsedTimeDisplay</p>
                        <p>Estimated Archiving Time Remaining: @estimatedTimeRemainingDisplay</p>
                    </div>
                    if(!userClickedCancel)
                    {
                        <div class="text-center m-3">
                            <button class="btn btn-sm" @onclick="HandleCancel">Cancel</button>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center m-3">
                            <span class="spinner-grow"></span>
                        </div>
                    }
                    break;

                case ArchiveStatus.Completed:
                case ArchiveStatus.Canceled:
                case ArchiveStatus.Failed:
                    break;
            }
        }
    </div>
</div>

<div class="modal fade" id="view-image-modal" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered justify-content-center" id="view-image-modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img src="@modalImageSrc" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code
{
    private bool accordionIsCollapsed = false;
    private bool showExtendedImageInformation = false;
    private List<Image>? images = new();
    private int pageIndex = 1;
    private int pageSize = 9;
    private int totalImages = 0;
    private int totalPages = 0;
    private string modalImageSrc = string.Empty;
    private ArchiveRequest archiveRequest = new();
    private ImageQuery imageQuery = new ImageQuery {
        StartDateTime = new DateTime(2010, 1, 1),
        EndDateTime = new DateTime(2020, 1, 1)
    };
    private List<string> siteNames = new();
    private List<int> siteNumbers = new();
    private List<int> cameraPositionNumbers = new();
    private int progressPercentValue = 0;
    private string elapsedTimeDisplay = string.Empty;
    private string estimatedTimeRemainingDisplay = string.Empty;
    private System.Timers.Timer? archiveProcessTimer;
    private DateTime lastPollTimestamp;
    private TimeSpan lastPolledElapsedTime;
    private TimeSpan lastPolledEstimatedTimeRemaining;
    private bool timerIsRunning = false;
    private SearchState searchState;
    private bool userClickedCancel = false;

    public string SiteName
    {
        get => imageQuery.SiteName ?? siteNames.First();
        set
        {
            imageQuery.SiteName = value;
            StateHasChanged();
            UpdateSiteNumbers();
        }
    }

    public int SiteNumber
    {
        get => imageQuery.SiteNumber;
        set
        {
            imageQuery.SiteNumber = value;
            StateHasChanged();
            UpdateCameraPositions();
        }
    }

    public int CameraPositionNumber
    {
        get => imageQuery.CameraPositionNumber;
        set
        {
            imageQuery.CameraPositionNumber = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        ThemeService.StateChanged += OnThemeChanged;

        siteNames = CameraPositionMap.GetSiteNames();
        SiteName = siteNames.First();
    }

    private void OnThemeChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnAccordionToggled()
    {
        accordionIsCollapsed = !accordionIsCollapsed;
    }

    private void UpdateSiteNumbers()
    {
        siteNumbers = CameraPositionMap.GetSubSiteNumbers(SiteName!);
        SiteNumber = siteNumbers.First();
    }

    private void UpdateCameraPositions()
    {
        cameraPositionNumbers = CameraPositionMap.GetCameraPositionNumbers(SiteName!, (int)SiteNumber!);
        CameraPositionNumber = cameraPositionNumbers.First();
    }

    private string GetCameraPositionName(string siteName, int siteNumber, int cameraPositionNumber)
    {
        return CameraPositionMap.GetCameraPositionName(siteName, siteNumber, cameraPositionNumber)!;
    }

    private async Task HandleSubmit()
    {
        searchState = SearchState.Loading;
        pageIndex = 1;

        await GetImagesByPageAsync();
    }

    private async Task GetImagesByPageAsync()
    {
        searchState = SearchState.Loading;

        try
        {
            var response = await HttpService.GetImagesByPageAsync(imageQuery, pageIndex - 1, pageSize);

            if (response is not null)
            {
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadFromJsonAsync<PaginationResponse>();

                    if (content is not null)
                    {
                        images = content.Images;
                        totalImages = content.TotalCount;
                        totalPages = (int)Math.Ceiling((double)totalImages / pageSize);
                    }
                }
            }

        }
        finally
        {
            searchState = SearchState.Loaded;
            StateHasChanged();
        }
    }

    private async Task FirstPage()
    {
        pageIndex = 1;
        await GetImagesByPageAsync();
    }

    private async Task NextPage()
    {
        pageIndex++;
        await GetImagesByPageAsync();
    }

    private async Task PreviousPage()
    {
        if (pageIndex > 1)
        {
            pageIndex--;
            await GetImagesByPageAsync();
        }
    }

    private async Task LastPage()
    {
        pageIndex = totalPages;
        await GetImagesByPageAsync();
    }

    public void Dispose()
    {
        ThemeService.StateChanged -= OnThemeChanged;
    }

    private async Task UpdatePaginationAsync(ChangeEventArgs e)
    {
        try
        {
            if (int.TryParse(e.Value!.ToString(), out int inputValue))
            {
                pageIndex = Math.Clamp(inputValue, 1, totalPages);
                await GetImagesByPageAsync();
            }
        }
        catch (Exception exception)
        {
            Console.WriteLine($"[ERROR] [Search] [PaginationChangedAsync]: {exception.Message}");
            throw;
        }
    }

    private async Task DownloadImage(Image image)
    {
        await JSRuntime.InvokeVoidAsync("download", $"/proxy/images/{image.Id}", $"{image.SiteName}_{image.SiteNumber}_{image.CameraPositionName}_{image.DateTime:hh.mmtt}.jpg");
    }

    private void InitializeArchiveProcessTimer()
    {
        lastPollTimestamp = DateTime.Now;
        timerIsRunning = true;

        archiveProcessTimer = new System.Timers.Timer(1000)
        {
            AutoReset = true
        };

        archiveProcessTimer.Elapsed += OnTimerElapsed;

        archiveProcessTimer.Start();
    }

    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if(!timerIsRunning)
        {
            return;
        }

        var timeSinceLastPoll = DateTime.Now - lastPollTimestamp;

        InvokeAsync(() =>
        {
            elapsedTimeDisplay = (lastPolledElapsedTime + timeSinceLastPoll).ToString(@"hh\:mm\:ss");

            var estimatedTimeRemaining = lastPolledEstimatedTimeRemaining - timeSinceLastPoll;
            estimatedTimeRemainingDisplay = (estimatedTimeRemaining > TimeSpan.Zero ? estimatedTimeRemaining : TimeSpan.Zero).ToString(@"hh\:mm\:ss");

            StateHasChanged();
        });
    }

    private void StopAndDisposeTimer()
    {
        timerIsRunning = false;

        if(archiveProcessTimer != null)
        {
            archiveProcessTimer.Elapsed -= OnTimerElapsed;
            archiveProcessTimer.Stop();
            archiveProcessTimer.Dispose();
            archiveProcessTimer = null;
        }
    }

    private async Task DownloadSearchResultsAsArchive()
    {
        userClickedCancel = false;
        progressPercentValue = 0;
        archiveRequest.StartDateTime = imageQuery.StartDateTime;
        archiveRequest.EndDateTime = imageQuery.EndDateTime;
        archiveRequest.SiteName = imageQuery.SiteName;
        archiveRequest.SiteNumber = imageQuery.SiteNumber;
        archiveRequest.CameraPositionNumber = imageQuery.CameraPositionNumber;
        archiveRequest.Status = ArchiveStatus.Pending;

        StateHasChanged();

        try
        {
            if(archiveRequest is null)
            {
                Console.WriteLine($"[ERROR] [Search] [DownloadAllImages]: Variable '{nameof(archiveRequest)}' is null.");
                return;
            }

            var response = await HttpService.PostArchiveRequestAsync(archiveRequest);

            if(response is null)
            {
                Console.WriteLine("[ERROR] [Search] [DownloadAllImages]: Non-success response status code.");
                return;
            }

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine("[ERROR] [Search] [DownloadAllImages]: Non-success response status code.");
                return;
            }

            if(response.Content is not null)
            {
                archiveRequest = await response.Content.ReadFromJsonAsync<ArchiveRequest>();
            }

            if (archiveRequest is null)
            {
                Console.WriteLine("[ERROR] [Search] [DownloadAllImages]: Response content is null.");
                return;
            }

            Console.WriteLine($"[INFO] [Search] [DownloadAllImages]: Archive job started with ID: {archiveRequest.Id}");

            lastPolledElapsedTime = archiveRequest.ElapsedTime;
            lastPolledEstimatedTimeRemaining = archiveRequest.EstimatedTimeRemaining;

            InitializeArchiveProcessTimer();

            while (true)
            {
                await Task.Delay(3000);

                response = await HttpService.GetArchiveStatusAsync(archiveRequest.Id);

                if (response == null)
                {
                    Console.WriteLine("[WARNING] [Search] [DownloadAllImages]: Response is null.");
                    return;
                }

                archiveRequest = await response.Content.ReadFromJsonAsync<ArchiveRequest>();

                if(archiveRequest is null)
                {
                    Console.WriteLine($"[ERROR] [Search] [DownloadAllImages]: Variable '{nameof(archiveRequest)}' is null.");
                    return;
                }

                if(archiveRequest.TotalImages > 0)
                {
                    double percentProcessed = (double)archiveRequest.ProcessedImages / archiveRequest.TotalImages * 100;
                    progressPercentValue = (int)percentProcessed;
                }

                lastPolledElapsedTime = archiveRequest.ElapsedTime;
                lastPolledEstimatedTimeRemaining = archiveRequest.EstimatedTimeRemaining;
                lastPollTimestamp = DateTime.Now;

                StateHasChanged();

                if(archiveRequest.Status is ArchiveStatus.Completed)
                {
                    Console.WriteLine($"[INFO] [Search] [DownloadAllImages]: Archive request completed.");
                    await JSRuntime.InvokeVoidAsync("download", $"/proxy/archive/download/{archiveRequest.Id}");
                    break;
                }
                else if(archiveRequest.Status is ArchiveStatus.Canceled)
                {
                    Console.WriteLine("[WARNING] [Search] [DownloadAllImages]: Archive request canceled.");
                    break;
                }
                else if(archiveRequest.Status is ArchiveStatus.Failed)
                {
                    Console.WriteLine("[WARNING] [Search] [DownloadAllImages]: Archive request failed.");
                    break;
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] [Search] [DownloadAllImages]: {ex.Message}, {ex.Source}");
        }
        finally
        {
            archiveRequest = new();
            progressPercentValue = 0;
            StopAndDisposeTimer();
            StateHasChanged();
        }
    }

    private async void HandleCancel()
    {
        userClickedCancel = true;

        if(archiveRequest is null)
        {
            Console.WriteLine($"[ERROR] [Search] [HandleCancel]: Variable '{nameof(archiveRequest)}' is null.");
            return;
        }

        var response = await HttpService.PostArchiveCancellationAsync(archiveRequest);
    }

    private void UpdateModalImageSrc(long Id)
    {
        modalImageSrc = $"/proxy/images/{Id}";
    }

    private string GetProgressBarWidth()
    {
        return $"width: {progressPercentValue}%";
    }
}