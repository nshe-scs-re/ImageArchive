@page "/mytest"
@inject HttpService HttpService
@inject IConfiguration config

<h3>Upload</h3>

<!-- Current Date and Time -->
<section class="current-datetime">
    <h4>Current Date and Time</h4>
    <p>@DateTime.Now.ToString("F")</p>
</section>

<!-- File Section -->
<section class="upload-one-file">
    <h4>Upload File(s)</h4>
    <button class="btn btn-primary" @onclick="OnShowModalClick">Upload File(s)</button>
</section>

<!-- File Upload Modal -->
<div class="modal" tabindex="-1" style="display:@(isModalVisible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upload Files</h5>
                <button type="button" class="btn-close" @onclick="OnHideModalClick"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="siteName" class="form-label">Site Name</label>
                    <select class="form-select" id="siteName" @onchange="OnSiteNameChanged">
                        <option value="">Select a site</option>
                        @foreach (var site in siteNames)
                        {
                            <option value="@site">@site</option>
                        }
                    </select>
                </div>
                <div class="mb-3 @(string.IsNullOrEmpty(siteName) ? "disabled-field" : "")">
                    <label for="siteNumber" class="form-label">Site Number</label>
                    <select class="form-select" id="siteNumber" @onchange="OnSiteNumberChanged" disabled="@(string.IsNullOrEmpty(siteName))">
                        <option value="">Select a site number</option>
                        @if (siteNumbers != null && siteNumbers.ContainsKey(siteName))
                        {
                            @foreach (var number in siteNumbers[siteName])
                            {
                                <option value="@number">@number</option>
                            }
                        }
                    </select>
                </div>
                <div class="mb-3 @(siteNumber == null ? "disabled-field" : "")">
                    <label for="cameraPosition" class="form-label">Camera Position</label>
                    <select class="form-select" id="cameraPosition" @onchange="OnCameraPositionChanged" disabled="@(siteNumber == null)">
                        <option value="">Select a camera position</option>
                        @if (cameraPositions != null)
                        {
                            @foreach (var position in cameraPositions)
                            {
                                <option value="@position.Value">@position.PositionName</option>
                            }
                        }
                    </select>
                </div>
                <div class="mb-3 @(string.IsNullOrEmpty(cameraPosition) ? "disabled-field" : "")">
                    <label for="cameraPositionNumber" class="form-label">Camera Position Number</label>
                    <input type="text" class="form-control" id="cameraPositionNumber" @bind="cameraPositionNumber" readonly />
                </div>
                                <!-- Date-Time Picker -->
                <div class="mb-3">
                    <label for="photoDateTime" class="form-label">Photo Date and Time</label>
                    <input type="datetime-local" id="photoDateTime" @bind="photoDateTime" class="form-control" />
                </div>

                <InputFile OnChange="HandleFileSelected" id="fileInputElement" multiple accept=".jpg,.jpeg" class="@(string.IsNullOrEmpty(cameraPosition) ? "disabled-field" : "")" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="OnHideModalClick">Close</button>
                <button type="button" class="btn btn-primary" @onclick="UploadFiles" disabled="@(!CanUpload)">Upload</button>
            </div>
        </div>
    </div>
</div>


<style>
    .disabled-field {
    pointer-events: none;
    opacity: 0.3;
    }
</style>

@if(errors.Count > 0)
{
    <h2>Error(s)</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code{
    private bool isModalVisible = false;
    private bool isBatchModalVisible = false;
    private int maxAllowedFiles = 5;
    private List<string> errors = new();
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private string siteName = string.Empty;
    private int? siteNumber;
    private string cameraPosition = string.Empty;
    private string cameraPositionName = string.Empty;
    private int cameraNumber;
    private int cameraPositionNumber;
    private DateTime? photoDateTime;

    private bool CanUpload => !string.IsNullOrEmpty(siteName) && siteNumber.HasValue && !string.IsNullOrEmpty(cameraPosition) && cameraPositionNumber >= 0 && selectedFiles.Any();

    private List<string> siteNames = new();
    private Dictionary<string, List<int>> siteNumbers = new();

    private List<CameraPositionEntry> cameraPositions = CameraPositions.Positions.Where(p => p.SiteName == "Rockland" && p.SiteNumber == 1).ToList();

    private Dictionary<string, List<int>> SiteNameToSiteNumbersMap = new()
    {
        { "Eldorado", new List<int>{ 3 }},
        { "Sheep", new List<int>{ 1, 2, 3, 4 }},
        { "Snake", new List<int>{ 1, 2, 3 }},
        { "Spring", new List<int>{ 3, 4 }},
        { "Rockland", new List<int>{ 1 }}
    };
    private List<int> SiteNumbers = new List<int> { 1 };

    protected override void OnInitialized()
    {
        LoadSiteData();
    }

    private void LoadSiteData()
    {
        siteNames = CameraPositions.Positions.Select(p => p.SiteName).Distinct().ToList();
        siteNumbers = CameraPositions.Positions
            .GroupBy(p => p.SiteName)
            .ToDictionary(g => g.Key, g => g.Select(p => p.SiteNumber).Distinct().ToList());
    }

    private void OnSiteNameChanged(ChangeEventArgs e)
    {
        siteName = e.Value?.ToString() ?? string.Empty;
        siteNumber = null;
        cameraPosition = string.Empty;
        cameraPositionNumber = 0;
        cameraPositions.Clear();
        if (!string.IsNullOrEmpty(siteName) && siteNumbers.ContainsKey(siteName))
        {
            siteNumbers[siteName] = CameraPositions.Positions
                .Where(p => p.SiteName == siteName)
                .Select(p => p.SiteNumber)
                .Distinct()
                .ToList();
        }
    }

    private void OnSiteNumberChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var number))
        {
            siteNumber = number;
            cameraPosition = string.Empty;
            cameraPositionNumber = 0;
            cameraPositions = CameraPositions.Positions
                .Where(p => p.SiteName == siteName && p.SiteNumber == siteNumber)
                .ToList();
        }
        else
        {
            siteNumber = null;
            cameraPosition = string.Empty;
            cameraPositionNumber = 0;
        }
    }

    private void OnCameraPositionChanged(ChangeEventArgs e)
    {
        cameraPosition = e.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrEmpty(cameraPosition))
        {
            var selectedPosition = cameraPositions.FirstOrDefault(p => p.Value.ToString() == cameraPosition);
            if (selectedPosition != null)
            {
                cameraPositionNumber = selectedPosition.Value;
            }
        }
    }

    
    private Task OnShowModalClick()
    {
        isModalVisible = true;
        return Task.CompletedTask;
    }

    private Task OnHideModalClick()
    {
        isModalVisible = false;
        return Task.CompletedTask;
    }

    private List<string> GetCameraNumbers()
    {
        if (siteNumbers != null && siteNumbers.ContainsKey(siteName) && siteNumbers[siteName].Contains(siteNumber.GetValueOrDefault()))
        {
            return siteNumbers[siteName].Select(sn => sn.ToString()).ToList();
        }
        return new List<string>();
    }

    private async Task Upload(InputFileChangeEventArgs e)
    {
        errors.Clear();
        var files = e.GetMultipleFiles();
        selectedFiles.AddRange(files);

        try
        { 
            var response = await HttpService.UploadImageAsync("api/upload/multiple", selectedFiles);
            foreach (var file in files)
            {
                var fileName = file.Name;
                var fileSize = file.Size;

                using var stream = file.OpenReadStream();
                using var reader = new StreamReader(stream);
                var fileContents = await reader.ReadToEndAsync();

                Console.WriteLine($"File name: {fileName}");
                Console.WriteLine($"File size: {fileSize} bytes");
                //TODO: extract time from photo's metadata at time taken/created?
                //Console.WriteLine($"Photo time: {photoDateTime}");
                Console.WriteLine($"File contents: {fileContents}");
                if (response.IsSuccessStatusCode)
                {
                    await OnHideModalClick();
                }
                else
                {
                    errors.Add("Error uploading file.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Message: {ex.Message}");
            throw;
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        errors.Clear();
        var files = e.GetMultipleFiles();
        if (files.Count > maxAllowedFiles)
        {
            errors.Add($"Error: Upload exceeding max file count. {maxAllowedFiles}");
            return;
        }
        selectedFiles.AddRange(files);
    }

    private async Task UploadFiles() 
    {
        if (CanUpload)
        {
            await Upload(new InputFileChangeEventArgs(selectedFiles));
            await OnHideModalClick();
        }
    }
}