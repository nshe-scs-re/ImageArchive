@page "/mytest"
@rendermode InteractiveServer
@inject HttpService HttpService
@inject IConfiguration config
@using Microsoft.JSInterop
@inject IJSRuntime js

<h3>MyTest</h3>
<InputFile OnChange="UploadSingle" style="display: none;" id="fileInputElement" multiple accept=".gif,.png,.jpg,.jpeg" />
<button @onclick="TriggerFileUpload">Upload a file</button>



@if(errors.Count > 0)
{
    <h2>Error(s)</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code{
    private int maxAllowedFiles = 5;
    //private int maxFileSize = 1024 * 1024 *3;
    private List<string> errors = new(); 
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private ElementReference fileInputElement;
    // private
    private async Task TriggerFileUpload()
    {
        var mouseEvent = new MouseEventArgs { Type = "click" };
        await js.InvokeVoidAsync("dispatchEvent", fileInputElement, mouseEvent);
    }

    private async Task UploadSingle(InputFileChangeEventArgs e)
    {
        errors.Clear();
        var files = e.GetMultipleFiles();
        selectedFiles.AddRange(files);
        // var response = HttpService.UploadImageAsync(files);
        // var temp = await response.Result.Content.ReadAsStringAsync();

        try
        { 
            if (e.FileCount > maxAllowedFiles)
            {
                errors.Add($"Error: Upload exceeding max file count. {maxAllowedFiles}");
                //selectedFiles.RemoveRange(maxAllowedFiles, selectedFiles.Count - maxAllowedFiles);
            }
            var response = await HttpService.UploadImageAsync(selectedFiles);
            foreach (var file in files)
            {
                // Get the file name and size
                var fileName = file.Name;
                var fileSize = file.Size;

                // Read the file contents
                using var stream = file.OpenReadStream();
                using var reader = new StreamReader(stream);
                var fileContents = await reader.ReadToEndAsync();

                // Do something with the file contents
                Console.WriteLine($"File name: {fileName}");
                Console.WriteLine($"File size: {fileSize} bytes");
                Console.WriteLine($"File contents: {fileContents}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Message: {ex.Message}");
            throw;
        }
    }
}
