@page "/Account/History"
@using System.Security.Claims
@inject TokenProvider tokenProvider
@inject HttpService HttpService;
@attribute [Authorize]
<PageTitle>Image Archive | History</PageTitle>

<div class="row">
    <div class="col text-center justify-content-center">
        <h1 class="h1">Hi, @Username</h1>
        <QuickGrid Items="@listOfUserQueries.AsQueryable()" Pagination="@pagination" Class="table table-sm table-bordered table-striped">
            <PropertyColumn Property="@(q => q.Timestamp)" Title="Date of Search" Format="yyyy-MM-dd HH:mm:ss" IsDefaultSortColumn="true"/>
            <PropertyColumn Property="@(q => q.DeserializedParameters.StartDateTime)" Title="Start Date/Time" />
            <PropertyColumn Property="@(q => q.DeserializedParameters.EndDateTime)" Title="End Date/Time" />
            <PropertyColumn Property="@(q => q.DeserializedParameters.SiteName)" Title="Site Name" />
            <PropertyColumn Property="@(q => q.DeserializedParameters.SiteNumber)" Title="Site Number" />
            <PropertyColumn Property="@(q => q.DeserializedParameters.CameraPositionNumber)" Title="Camera Position Number" />
        </QuickGrid>
        <Paginator State="@pagination"></Paginator>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private AuthenticationState? state;
    private string Username = string.Empty;
    private string auth0UserId = string.Empty;
    private List<UserQuery> listOfUserQueries = new();
    private PaginationState pagination = new PaginationState
    {
        ItemsPerPage = 10
    };

    protected override async Task OnInitializedAsync()
    {
        state = await AuthenticationStateTask;

        //TODO: Determine if necessary
        if(state.User.Identity == null || !state.User.Identity.IsAuthenticated)
        {
            throw new InvalidOperationException("User.Identity is null or user is not authenticated.");
        }

        Username = state.User.Identity.Name!;

        auth0UserId = state.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "user id claim unsuccessful";

        await GetQueryHistory();

        await base.OnInitializedAsync();
    }

    public async Task GetQueryHistory()
    {
        var response = await HttpService.GetQueryHistoryAsync();

        listOfUserQueries = await response.Content.ReadFromJsonAsync<List<UserQuery>>();
    }
}

