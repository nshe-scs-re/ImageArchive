
@page "/timelapse-query"
@using System.Text.Json;
@inject HttpService HttpService
@inject NavigationManager NavManager


<PageTitle>Custom Timelapse</PageTitle>

<div class="container py-5">
    <h2 class="mb-4 text-center">Custom Timelapse Viewer</h2>

    <EditForm Model="@query" OnValidSubmit="LoadImages">
        <div class="row g-3">
            <div class="col-md-3">
                <InputDate class="form-control" @bind-Value="query.StartDate" />
                <label class="form-label">Start Date</label>
            </div>
            <div class="col-md-3">
                <InputDate class="form-control" @bind-Value="query.EndDate" />
                <label class="form-label">End Date</label>
            </div>
            <div class="col-md-2">
                <InputText class="form-control" @bind-Value="query.SiteName" />
                <label class="form-label">Site Name</label>
            </div>
            <div class="col-md-2">
                <InputNumber class="form-control" @bind-Value="query.SiteNumber" />
                <label class="form-label">Site #</label>
            </div>
            <div class="col-md-2">
                <InputNumber class="form-control" @bind-Value="query.CameraPositionNumber" />
                <label class="form-label">Camera Pos #</label>
            </div>
        </div>

        <div class="mt-3 text-center">
            <button class="btn btn-primary" type="submit">🔍 Fetch Timelapse</button>
        </div>
    </EditForm>

    @if (loading)
    {
        <p class="text-center mt-4">Loading images...</p>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger mt-4">@errorMessage</div>
    }
    else if (imageUrls.Count > 0)
    {
        <div class="text-center mt-4">
            <img src="@imageUrls[currentIndex]" class="img-fluid rounded shadow" style="max-height: 70vh;" />
            <div class="text-muted my-2">Image @((currentIndex + 1)) of @imageUrls.Count</div>
            <div class="btn-group mt-2">
                <button class="btn btn-success" @onclick="StartSlideshow" disabled="@slideshowRunning">▶ Play</button>
                <button class="btn btn-danger" @onclick="StopSlideshow" disabled="@(!slideshowRunning)">⏸ Pause</button>
                <a class="btn btn-outline-primary" href="@imageUrls[currentIndex]" download>⬇ Download</a>
            </div>
        </div>
    }
</div>

@code {
    private Query query = new()
        {
            StartDate = DateTime.UtcNow.AddYears(-1),
            EndDate = DateTime.UtcNow,
            SiteName = "Sheep",
            SiteNumber = 1,
            CameraPositionNumber = 1,
            PageIndex = 0,
            PageSize = 1000
        };

    private List<string> imageUrls = new();
    private int currentIndex = 0;
    private Timer? timer;
    private bool slideshowRunning = false;
    private bool loading = false;
    private string? errorMessage;

    private async Task LoadImages()
    {
        loading = true;
        errorMessage = null;

        try
        {
            string filter = $"{query.StartDate},{query.EndDate},{query.PageIndex},{query.PageSize},{query.SiteName},{query.SiteNumber},{query.CameraPositionNumber}";
            var httpClient = HttpService.CreateForwardClient();
            var response = await httpClient.GetAsync($"api/images/paginated?filter={filter}");

            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var result = await response.Content.ReadFromJsonAsync<ApiResponse>(options);
                var baseUrl = "http://localhost:8080";

                imageUrls = result?.Images
                    .Where(i => i.Id > 0)
                    .OrderBy(i => i.DateTime)
                    .Select(i => $"{baseUrl}/api/images/{i.Id}")
                    .ToList() ?? new List<string>();

                currentIndex = 0;
            }
            else
            {
                errorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void StartSlideshow()
    {
        if (imageUrls.Count == 0) return;
        slideshowRunning = true;

        timer = new Timer(_ =>
        {
            currentIndex = (currentIndex + 1) % imageUrls.Count;
            InvokeAsync(StateHasChanged);
        }, null, 0, 5000);
    }

    private void StopSlideshow()
    {
        timer?.Dispose();
        slideshowRunning = false;
    }

    private void NextImage() => currentIndex = (currentIndex + 1) % imageUrls.Count;

    private void PreviousImage() => currentIndex = (currentIndex - 1 + imageUrls.Count) % imageUrls.Count;

    public class Query
    {
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string SiteName { get; set; } = "";
        public int SiteNumber { get; set; }
        public int CameraPositionNumber { get; set; }
        public int PageIndex { get; set; }
        public int PageSize { get; set; }
    }

    public class Image
    {
        public long Id { get; set; }
        public string? FilePath { get; set; }
        public DateTime? DateTime { get; set; }
    }

    public class ApiResponse
    {
        public int TotalCount { get; set; }
        public List<Image> Images { get; set; } = new();
    }
}
