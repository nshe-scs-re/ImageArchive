@page "/Account/Profile"
@inject TokenProvider tokenProvider
@attribute [Authorize]

<PageTitle>Image Archive | Profile</PageTitle>

<div class="row">
    @if(state.User.Identity.IsAuthenticated)
    {
        <div class="col text-center">
            <h1 class="h1">Hi, @Username</h1>
        </div>
    }
    else
    {
        <p>Please sign in to view your profile.</p>
    }
</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string Username = string.Empty;
    private string EmailAddress = string.Empty;
    private string Picture = string.Empty;
    private string IdToken = string.Empty;
    private AuthenticationState? state;

    protected override async Task OnInitializedAsync()
    {
        state = await AuthenticationStateTask;

        Username = state.User.Identity.Name ?? string.Empty;
        EmailAddress = state.User.Claims
            .Where(c => c.Type.Equals(System.Security.Claims.ClaimTypes.Email))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        Picture = state.User.Claims
            .Where(c => c.Type.Equals("picture"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;


        IdToken = tokenProvider.IdToken;

        await base.OnInitializedAsync();
    }
}

