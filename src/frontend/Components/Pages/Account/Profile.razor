@page "/Account/Profile"
@inject TokenProvider tokenProvider

@inject HttpService HttpService;
@using System.Text.Json  
@using System.Net.Http.Headers  
@using frontend.Models;

@attribute [Authorize]

<PageTitle>Image Archive | Profile</PageTitle>

<div class="row">
    @if (state.User.Identity.IsAuthenticated == true)
    {
        <div class="col">
            <img src="@Picture" alt="Profile Picture" class="img-rounded img-responsive" />
        </div>
        <div class="col text-center">
            <h1 class="h1">Hi, @Username</h1>
            @if(!string.IsNullOrEmpty(EmailAddress))
            {
                <p>@EmailAddress</p>
            }
            <!-- Add Query History Section Here -->
            <div class="position-relative">
                <button class="btn btn-primary mt-2" @onclick="ToggleHistory">
                    Query History @(showHistory ? "▲" : "▼")
                </button>
                @if (showHistory)
                {
                    <div class="dropdown-menu show d-block mt-2 p-3 border rounded">
                        @if (queryHistory?.Any() == true)
                        {
                            <div class="query-history-container">
                                @foreach (var query in queryHistory)
                                {
                                    <div class="query-item mb-2">
                                        <div class="small text-muted">
                                            @query.timestamp.ToLocalTime().ToString("g")
                                        </div>
                                        <div class="text-break">
                                            @GetFormattedParameters(query.parameters)
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else if (errorMessage != null)
                        {
                            <div class="text-danger">@errorMessage</div>
                        }
                        else
                        {
                            <div>No query history found</div>
                        }
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <p>Please sign in to view your profile.</p>
    }
</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string Username = string.Empty;
    private string EmailAddress = string.Empty;
    private string Picture = string.Empty;
    private string IdToken = string.Empty;
    private AuthenticationState? state;
    private bool isInitialized = false;


    // New additions for query history
    private bool showHistory = false;
    private List<QueryHistoryItem> queryHistory = new();
    private string? errorMessage;


    protected override async Task OnInitializedAsync()
{
    state = await AuthenticationStateTask;

    if (state.User.Identity == null || !state.User.Identity.IsAuthenticated)
    {
        throw new InvalidOperationException("User.Identity is null or user is not authenticated.");
    }

    Username = state.User.Identity.Name!;
    EmailAddress = state.User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value ?? string.Empty;
    Picture = state.User.Claims.FirstOrDefault(c => c.Type == "picture")?.Value ?? string.Empty;

    IdToken = tokenProvider.IdToken;

    await base.OnInitializedAsync();
}

    private async Task ToggleHistory()
    {
        showHistory = !showHistory;
        if (showHistory && !queryHistory.Any())
        {
            await GetQueryHistoryAsync();
        }
    }

    private async Task GetQueryHistoryAsync()
    {
        try
        {
           
            var response = await HttpService.GetQueryHistoryAsync();

            if (response.IsSuccessStatusCode)
            {
                queryHistory = await response.Content.ReadFromJsonAsync<List<QueryHistoryItem>>();
                errorMessage = null;
            }
            else
            {
                errorMessage = $"Error loading history: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load query history: {ex.Message}";
        }
    }

    private string GetFormattedParameters(string parametersJson)
    {
        try
        {
            var parameters = JsonSerializer.Deserialize<Dictionary<string, object>>(parametersJson);
            return string.Join(", ", parameters.Select(kvp => $"{kvp.Key}: {kvp.Value}"));
        }
        catch
        {
            return parametersJson;
        }
    }

    public class QueryHistoryItem
    {
        public DateTime timestamp { get; set; }
        public string parameters { get; set; } = string.Empty;
    }
   
}

