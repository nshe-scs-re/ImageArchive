@page "/"
@attribute [StreamRendering]
@inject HttpService HttpService
@inject ThemeService ThemeService

<PageTitle>Home</PageTitle>

<div class="my-3 py-3 text-center rounded bg-body-tertiary">
    <div class="row">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light py-2">Image Repository Search</h1>
            <p class="lead">Execute a query against the image repository by using the tool below.</p>
        </div>
    </div>
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
        <div class="col mx-auto border">
            <EditForm Model="@imageQuery" OnValidSubmit="GetPaginatedImagesAsync" FormName="ImageQueryForm" class="form">
                <div class="row py-2">
                    <label for="StartDate" class="col col-form-label">Query start date:</label>
                    <div class="col">
                        <InputDate id="StartDate" @bind-Value="imageQuery.StartDateTime" Type="InputDateType.Date" class="form-control" />
                    </div>
                </div>
                <div class="row py-2">
                    <label for="EndDate" class="col col-form-label">Query end date:</label>
                    <div class="col">
                        <InputDate id="EndDate" @bind-Value="imageQuery.EndDateTime" Type="InputDateType.Date" class="form-control" />
                    </div>
                </div>
                <div class="row py-2">
                    <label for="StartTime" class="col col-form-label">Query start time:</label>
                    <div class="col">
                        <InputDate id="StartTime" @bind-Value="imageQuery.StartTimeOnly" Type="InputDateType.Time" class="form-control" />
                    </div>
                </div>
                <div class="row py-2">
                    <label for="EndTime" class="col col-form-label">Query end time:</label>
                    <div class="col">
                        <InputDate id="EndTime" @bind-Value="imageQuery.EndTimeOnly" Type="InputDateType.Time" class="form-control" />
                    </div>
                </div>
                <div class="row py-2">
                    <label for="Site" class="col col-form-label">Site Name:</label>
                    <div class="col">
                        <InputSelect @bind-Value="imageQuery.Site" id="Site" class="form-select">
                            <option value="Rockland">Rockland</option>
                            <option value="Sheep">Sheep</option>
                            <option value="Snake">Snake</option>
                            <option value="Spring">Spring</option>
                        </InputSelect>
                    </div>
                </div>
                <div class="row py-2">
                    <label for="CameraNumber" class="col col-form-label">Camera Number:</label>
                    <div class="col">
                        <InputSelect @bind-Value="imageQuery.CameraNumber" id="CameraNumber" class="form-select">
                            <option value="1">Camera 1</option>
                            <option value="2">Camera 2</option>
                            <option value="3">Camera 3</option>
                        </InputSelect>
                    </div>
                </div>
                <div class="row py-2">
                    <label for="CameraPosition" class="col col-form-label">Camera Position:</label>
                    <div class="col">
                        <InputSelect @bind-Value="imageQuery.CameraPosition" id="CameraPosition" class="form-select">
                            <option value="1">Position 1</option>
                            <option value="2">Position 2</option>
                            <option value="3">Position 3</option>
                        </InputSelect>
                    </div>
                </div>
                <div class="text-end py-2">
                    <button type="submit" class="btn btn-outline-secondary">Search</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (querySubmitted && loading is true)
{
    <div class="my-3 py-3 album bg-body-tertiary rounded">
        <div class="container">
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                @for (int i = 0; i < pageSize; i++)
                {
                    <div class="col">
                        <div class="card shadow-sm">
                            <img src="/placeholder.jpg" class="card-img-top" width="320" height="240" />
                            <div class="card-body">
                                <p class="card-text">Information about image</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
else if (querySubmitted && loading is false)
{
    <div class="my-3 py-3 album bg-body-tertiary rounded">
        <div class="container">
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                @foreach (var image in images!)
                {
                    <div class="col">
                        <div class="card shadow-sm">
                            <img src="/api/images/@image.Id" class="card-img-top" width="320" height="240" />
                            <div class="card-body">
                                <p class="card-text">Information about image</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <nav aria-label="Pagination">
        <ul class="pagination justify-content-center">
            <li class="page-item @(pageIndex == 0 ? "disabled" : "")">
                <button type="button" class="page-link" @onclick="PreviousPage">Previous</button>
            </li>
            <li class="page-item">
                <span class="page-link">@(pageIndex + 1)</span>
            </li>
            <li class="page-item">
                <button type="button" class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
}

@code
{
    private ImageQuery imageQuery = new();
    private bool loading = false;
    private bool querySubmitted = false;
    private List<Image>? images = new();
    private int pageIndex = 0;
    private int pageSize = 9;

    protected override void OnInitialized()
    {
        ThemeService.StateChanged += StateHasChanged;
    }

    private async Task GetPaginatedImagesAsync()
    {
        imageQuery.StartDateTime = new DateTime(DateOnly.FromDateTime(imageQuery.StartDateTime), imageQuery.StartTimeOnly);
        imageQuery.EndDateTime = new DateTime(DateOnly.FromDateTime(imageQuery.EndDateTime), imageQuery.EndTimeOnly);

        loading = true;

        var response = await HttpService.GetPaginatedImagesAsync(imageQuery.StartDateTime, imageQuery.EndDateTime, pageIndex, pageSize, imageQuery.Site);

        if(response is not null)
        {
            querySubmitted = true;
            if (response.IsSuccessStatusCode)
            {
                images = await response.Content.ReadFromJsonAsync<List<Image>>();
                loading = false;
            }
        }
    }

    private async Task NextPage()
    {
        pageIndex++;
        await GetPaginatedImagesAsync();
    }

    private async Task PreviousPage()
    {
        if (pageIndex > 0)
        {
            pageIndex--;
            await GetPaginatedImagesAsync();
        }
    }

    private string GetTheme()
    {
        return ThemeService.State? "custom-color-bg-secondary" : "custom-color-bg-dm-secondary";
    }

    public void Dispose()
    {
        ThemeService.StateChanged -= StateHasChanged;
    }
}