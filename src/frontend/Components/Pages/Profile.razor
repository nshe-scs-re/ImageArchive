@page "/Profile"
@using Microsoft.AspNetCore.Authorization
@inject TokenProvider tokenProvider
@attribute [Authorize]

<PageTitle>Profile</PageTitle>

<div class="row">
  <div class="col-md-12">
    <div class="row">
      <h2>Profile</h2>
      <div class="col-md-2">
        <img src="@Picture" alt="" class="img-rounded img-responsive" />
      </div>
      <div class="col-md-4">
        @if(!string.IsNullOrEmpty(Username)){<h3>@Username</h3>}
        @if(!string.IsNullOrEmpty(EmailAddress)){<p>@EmailAddress</p>}
        @if(!string.IsNullOrEmpty(IdToken)){<p>@IdToken</p>}
      </div>
    </div>
  </div>
</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string Username = string.Empty;
    private string EmailAddress = string.Empty;
    private string Picture = string.Empty;
    private string IdToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask;

        Username = state.User.Identity.Name ?? string.Empty;
        EmailAddress = state.User.Claims
            .Where(c => c.Type.Equals(System.Security.Claims.ClaimTypes.Email))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        Picture = state.User.Claims
            .Where(c => c.Type.Equals("picture"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;


        IdToken = tokenProvider.IdToken;

        await base.OnInitializedAsync();
    }
}

