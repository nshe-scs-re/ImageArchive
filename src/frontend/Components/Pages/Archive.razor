@page "/archive"
@inject HttpService HttpService
@inject IJSRuntime JSRuntime

<ul class="list-unstyled">
    <li class="m-2"><button type="button" class="btn btn-primary" @onclick="PostArchiveRequest">Start</button></li>
    <li class="m-2"><button type="button" class="btn btn-primary" @onclick="() => GetArchiveStatus(request.Id)" disabled="@(request.Id == Guid.Empty)">Status</button></li>
    <li class="m-2"><button type="button" class="btn btn-primary" @onclick="() => DownloadArchive(request.Id)" disabled="@(request.Status != ArchiveStatus.Completed)">Download</button></li>
</ul>

@code {
    ArchiveRequest request = new ArchiveRequest
    {
        StartDate = new DateTime(2019, 1, 1),
        EndDate = DateTime.Now
    };

    private async Task PostArchiveRequest()
    {
        try
        {
            var response = await HttpService.PostArchiveRequestAsync(request);

            if (response.IsSuccessStatusCode)
            {
                request = await response.Content.ReadFromJsonAsync<ArchiveRequest>();

                if (request is not null)
                {
                    Console.WriteLine(request.Status);
                    Console.WriteLine(request.Id);
                }
            }
            else
            {
                Console.WriteLine("DEBUG [Archive.razor] [ArchiveStartRequest]: Archive request failed");
            }
        }
        catch (Exception exception)
        {
            Console.WriteLine($"ERROR [Archive.razor] [ArchiveStartRequest]: Exception message: {exception.Message}");
            throw;
        }
    }

    private async Task GetArchiveStatus(Guid id)
    {
        try
        {
            var response = await HttpService.GetArchiveStatusAsync(id);

            if(response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadFromJsonAsync<ArchiveRequest>();
                if(content is not null)
                {
                    request.Status = content.Status;
                    Console.WriteLine($"DEBUG [Archive.razor] [GetArchiveStatus()] archive status: {request.Status}");
                }
            }
            else
            {
                var responseCode = response.StatusCode;
                var message = await response.Content.ReadAsStringAsync();

                Console.WriteLine(responseCode);
                Console.WriteLine(message);
            }
        }
        catch (Exception exception)
        {
            Console.WriteLine($"ERROR [Archive.razor] [GetArchiveStatus]: Exception message: {exception.Message}");
            throw;
        }
    }

    private async Task DownloadArchive(Guid jobId)
    {
        var url = $"/api/archive/download/{jobId}";

        //Console.WriteLine($"DEBUG [Archive.razor] [DownloadArchive()] url: {url}");

        await JSRuntime.InvokeVoidAsync("download", url, $"{jobId}.zip");
    }
}
