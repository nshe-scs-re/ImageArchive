@page "/timelapse"
@inject HttpService HttpService
@inject NavigationManager NavManager

<PageTitle>Timelapse Viewer</PageTitle>

<div class="container py-5">
    <div class="text-center mb-4">
        <h1 class="display-4">Timelapse Viewer</h1>
        <p class="lead">Watch environmental changes unfold over time through archived imagery.</p>
    </div>

    @if (loading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading images...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (imageUrls.Count > 0)
    {
        <div class="text-center">
            <img src="@imageUrls[currentIndex]" class="img-fluid rounded shadow mb-3" style="max-height: 70vh; object-fit: contain;" />
            <div class="mb-3 text-muted">Image @((currentIndex + 1)) of @imageUrls.Count</div>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-success" @onclick="StartSlideshow" disabled="@slideshowRunning">▶ Play</button>
                <button class="btn btn-warning" @onclick="PreviousImage">⏮ Prev</button>
                <button class="btn btn-info" @onclick="NextImage">⏭ Next</button>
                <button class="btn btn-danger" @onclick="StopSlideshow" disabled="@(!slideshowRunning)">⏸ Pause</button>
                <button class="btn btn-secondary" @onclick="ResetViewer">🔄 Reset</button>
                <a href="@imageUrls[currentIndex]" download class="btn btn-outline-primary">⬇ Download</a>
            </div>
        </div>
    }
    else
    {
        <div class="text-center">
            <button class="btn btn-primary btn-lg" @onclick="LoadImages">📷 Load Timelapse Images</button>
        </div>
    }
</div>

@code {
    private List<string> imageUrls = new();
    private int currentIndex = 0;
    private Timer? timer;
    private bool loading = false;
    private bool slideshowRunning = false;
    private string? errorMessage;

    private async Task LoadImages()
    {
        loading = true;
        errorMessage = null;

        try
        {
            var images = await HttpService.GetAllImagesAsync();
            var baseUrl = "http://localhost:8080"; // replace with your backend origin if different


            imageUrls = images
                .Where(i => i.Id > 0)
                .OrderBy(i => i.DateTime) // Sort oldest to newest
                .Select(i => $"{baseUrl}/api/images/{i.Id}")
                .ToList();

            currentIndex = 0;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load images: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void StartSlideshow()
    {
        if (imageUrls.Count == 0) return;
        slideshowRunning = true;

        timer = new Timer(_ =>
        {
            currentIndex = (currentIndex + 1) % imageUrls.Count;
            InvokeAsync(StateHasChanged);
        }, null, 0, 5000); // Every 5 seconds
    }

    private void StopSlideshow()
    {
        timer?.Dispose();
        slideshowRunning = false;
    }

    private void NextImage()
    {
        currentIndex = (currentIndex + 1) % imageUrls.Count;
    }

    private void PreviousImage()
    {
        currentIndex = (currentIndex - 1 + imageUrls.Count) % imageUrls.Count;
    }

    private void ResetViewer()
    {
        StopSlideshow();
        currentIndex = 0;
    }
}