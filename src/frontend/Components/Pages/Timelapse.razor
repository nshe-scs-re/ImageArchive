@page "/timelapse"
@using System.Text.Json;
@inject HttpService HttpService

<PageTitle>Timelapse</PageTitle>

<div class="row">
    <h1 class="h1 m-3 text-center">Timelapse Viewer</h1>
    <div class="col">
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 justify-content-center">
            <EditForm Model="@query" OnValidSubmit="LoadImages" class="form p-4 border">
                <div class="row">
                    <label class="col-form-label col">Start Date</label>
                    <InputDate class="form-control col" @bind-Value="query.StartDateTime" />
                </div>
                <div class="row">
                    <label class="col-form-label col">End Date</label>
                    <InputDate class="form-control col" @bind-Value="query.EndDateTime" />
                </div>
                <div class="row">
                    <label class="col-form-label col">Site Name</label>
                    <InputText class="form-control col" @bind-Value="query.SiteName" />
                </div>
                <div class="row">
                    <label class="col-form-label col">Site #</label>
                    <InputNumber class="form-control col" @bind-Value="query.SiteNumber" />
                </div>
                <div class="row">
                    <label class="col-form-label col">Camera Pos #</label>
                    <InputNumber class="form-control col" @bind-Value="query.CameraPositionNumber" />
                </div>
                <div class="mt-3 text-center">
                    <button class="btn" type="submit">🔍 Fetch Timelapse</button>
                </div>
            </EditForm>
        </div>
    </div>

    @if (loading)
    {
        <p class="text-center mt-4">Loading images...</p>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger mt-4">@errorMessage</div>
    }
    else if (imageUrls.Count > 0)
    {
        <div class="text-center mt-4">
            <img src="@imageUrls[currentIndex]" class="img-fluid rounded shadow" width="640" height="480"/>
            <div class="text-muted my-2">
                Image @((currentIndex + 1)) of @imageUrls.Count
            </div>
            <div class="btn-group m-3">
                <button class="btn" @onclick="StartSlideshow" disabled="@slideshowRunning">▶ Play</button>
                <button class="btn" @onclick="StopSlideshow" disabled="@(!slideshowRunning)">⏸ Pause</button>
            </div>
        </div>
    }
</div>

@code {
    private ImageQuery query = new ImageQuery
    {
        StartDateTime = new DateTime(2010, 1, 1),
        EndDateTime = new DateTime(2020, 1, 1)
    };
    private List<string> imageUrls = new();
    private int currentIndex = 0;
    private Timer? timer;
    private bool slideshowRunning = false;
    private bool loading = false;
    private string? errorMessage;
    private int pageIndex = 0;
    private int pageSize = 1000;

    private async Task LoadImages()
    {
        loading = true;
        errorMessage = null;

        try
        {
            var response = await HttpService.GetImagesByPageAsync(query,pageIndex,pageSize);

            if (response.IsSuccessStatusCode)
            {
                var jsonSerializerOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var content = await response.Content.ReadFromJsonAsync<PaginationResponse>(jsonSerializerOptions);

                using(var client = HttpService.CreateProxyClient())
                {
                    var baseUrl = client.BaseAddress;

                    imageUrls = content?.Images!
                        .Where(i => i.Id > 0)
                        .OrderBy(i => i.DateTime)
                        .Select(i => $"{baseUrl}proxy/images/{i.Id}")
                        .ToList() ?? new List<string>();

                    currentIndex = 0;
                }
            }
            else
            {
                errorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void StartSlideshow()
    {
        if (imageUrls.Count == 0) return;
        slideshowRunning = true;

        timer = new Timer(_ =>
        {
            currentIndex = (currentIndex + 1) % imageUrls.Count;
            InvokeAsync(StateHasChanged);
        }, null, 0, 5000);
    }

    private void StopSlideshow()
    {
        timer?.Dispose();
        slideshowRunning = false;
    }

    private void NextImage() => currentIndex = (currentIndex + 1) % imageUrls.Count;

    private void PreviousImage() => currentIndex = (currentIndex - 1 + imageUrls.Count) % imageUrls.Count;
}
