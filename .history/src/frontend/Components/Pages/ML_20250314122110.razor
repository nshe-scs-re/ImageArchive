@page "/ML"
@using System.Diagnostics
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2 class="text-center mb-0">Snow Prediction Tool</h2>
        </div>
        <div class="card-body">
            <div class="form-group text-center">
                <InputFile OnChange="@HandleFileSelected" class="form-control mb-3" accept="image/*" />
                
                <button class="btn btn-primary" @onclick="AnalyzeImage" disabled="@(uploadedFile == null || isAnalyzing)">
                    @if (isAnalyzing)
                    {
                        <span class="spinner-border spinner-border-sm mr-2" role="status" aria-hidden="true"></span>
                        <span>Analyzing...</span>
                    }
                    else
                    {
                        <span>Analyze Image</span>
                    }
                </button>
            </div>

            @if (!string.IsNullOrEmpty(analysisStatus))
            {
                <p class="text-center mt-3 @(analysisStatus.StartsWith("Error") ? "text-danger" : "text-info")">
                    @analysisStatus
                </p>
            }

            @if (ClassificationResults != null)
            {
                <div class="mt-4">
                    <div class="alert @(ClassificationResults.Prediction == "Has Snow" ? "alert-info" : "alert-warning")">
                        <strong>Prediction:</strong> @ClassificationResults.Prediction
                        <br />
                        <strong>Snow Probability:</strong> @(ClassificationResults.SnowProbability.ToString("P1"))
                        <br />
                        <strong>No Snow Probability:</strong> @(ClassificationResults.NoSnowProbability.ToString("P1"))
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IBrowserFile? uploadedFile;
    private bool isAnalyzing = false;
    private string analysisStatus = string.Empty;
    private ClassificationResult? ClassificationResults;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        analysisStatus = "Image loaded. Click 'Analyze Image' to begin.";
        StateHasChanged();
    }

    private async Task AnalyzeImage()
    {
        if (uploadedFile == null) return;

        isAnalyzing = true;
        ClassificationResults = null;
        analysisStatus = "Analyzing image...";
        StateHasChanged();

        try
        {
            var tempFileName = $"temp_{Guid.NewGuid()}.jpg";
            var tempPath = Path.Combine(Path.GetTempPath(), tempFileName);
            
            await using (var stream = new FileStream(tempPath, FileMode.Create))
            {
                await uploadedFile.OpenReadStream().CopyToAsync(stream);
            }

            var solutionRoot = Directory.GetParent(Directory.GetCurrentDirectory())?.Parent?.FullName;
            if (solutionRoot == null)
            {
                throw new DirectoryNotFoundException("Could not find solution root directory");
            }

            var scriptPath = Path.Combine(solutionRoot, "predictor", "Model", "classify_images.py");
            var modelPath = Path.Combine(solutionRoot, "predictor", "Model", "best_model.pth");

            // Check if the script and model files exist
            if (!File.Exists(scriptPath))
            {
                throw new FileNotFoundException($"Python script not found at {scriptPath}. Please ensure the script file is in the correct location.");
            }
            
            // Check if the model file exists
            if (!File.Exists(modelPath))
            {
                throw new FileNotFoundException($"Model file not found at {modelPath}. Please ensure the model file is in the correct location.");
            }

            using var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "python3",
                    Arguments = $"\"{scriptPath}\" \"{tempPath}\" --model \"{modelPath}\"",
                    //python3 classify_images.py /path/to/image.jpg --model /path/to/model.pth
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                }
            };

            process.Start();
            var output = await process.StandardOutput.ReadToEndAsync();
            var error = await process.StandardError.ReadToEndAsync();
            await process.WaitForExitAsync();

            if (process.ExitCode != 0)
            {
                throw new Exception($"Python script failed: {error}");
            }
 
            foreach (var line in output.Split('\n'))
            {
                if (line.StartsWith("Prediction:"))
                    ClassificationResults = new ClassificationResult { Prediction = line.Split(':')[1].Trim() };
                else if (line.StartsWith("Snow Probability:"))
                    ClassificationResults.SnowProbability = double.Parse(line.Split(':')[1].Trim().TrimEnd('%')) / 100;
                else if (line.StartsWith("No Snow Probability:"))
                    ClassificationResults.NoSnowProbability = double.Parse(line.Split(':')[1].Trim().TrimEnd('%')) / 100;
            }

            analysisStatus = "Analysis complete!";

            if (File.Exists(tempPath))
            {
                File.Delete(tempPath);
            }
        }
        catch (Exception ex)
        {
            analysisStatus = $"Error: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private class ClassificationResult
    {
        public string Prediction { get; set; } = "";
        public double SnowProbability { get; set; }
        public double NoSnowProbability { get; set; }
    }
}