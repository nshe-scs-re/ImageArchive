@page "/ML"
@using System.Diagnostics
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h2 class="text-center mb-0">Snow Prediction Tool</h2>
        </div>
        <div class="card-body">
            <!-- File Upload -->
            <div class="form-group text-center">
                <InputFile OnChange="@HandleFileSelected" class="form-control mb-3" accept="image/*" />
                
                @if (!string.IsNullOrEmpty(selectedImagePath))
                {
                    <div class="mt-3">
                        <img src="@selectedImagePath" class="img-fluid rounded mb-3" style="max-height: 300px;" alt="Selected image" />
                    </div>
                }

                <!-- Email Input -->
                <div class="form-group mb-3">
                    <input type="email" 
                           class="form-control" 
                           placeholder="Enter email for results (optional)" 
                           @bind="userEmail" />
                </div>

                <button class="btn btn-primary" @onclick="AnalyzeImage" disabled="@(string.IsNullOrEmpty(selectedImagePath) || isAnalyzing)">
                    @if (isAnalyzing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Analyzing...</span>
                    }
                    else
                    {
                        <span>Analyze Image</span>
                    }
                </button>
            </div>

            <!-- Progress Bar -->
            @if (isAnalyzing)
            {
                <div class="mt-3">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" 
                             style="width: @(analysisProgress)%">
                            @analysisProgress%
                        </div>
                    </div>
                    <p class="text-center mt-2">@analysisStatus</p>
                </div>
            }

            <!-- Results Section -->
            @if (ClassificationResults != null)
            {
                <div class="mt-4">
                    <div class="card">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Analysis Results</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>Selected Image:</h6>
                                    <img src="@selectedImagePath" class="img-fluid rounded" alt="Selected image" />
                                    <button class="btn btn-secondary mt-2" @onclick="DownloadImage">
                                        <i class="bi bi-download"></i> Download Image
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <div class="alert @(ClassificationResults.Prediction == "Has Snow" ? "alert-info" : "alert-warning")">
                                        <strong>Prediction:</strong> @ClassificationResults.Prediction
                                    </div>
                                    <div class="progress mb-3">
                                        <div class="progress-bar bg-info" 
                                             role="progressbar" 
                                             style="width: @(ClassificationResults.SnowProbability * 100)%">
                                            Snow: @(ClassificationResults.SnowProbability.ToString("P1"))
                                        </div>
                                    </div>
                                    <div class="progress mb-3">
                                        <div class="progress-bar bg-warning" 
                                             role="progressbar" 
                                             style="width: @(ClassificationResults.NoSnowProbability * 100)%">
                                            No Snow: @(ClassificationResults.NoSnowProbability.ToString("P1"))
                                        </div>
                                    </div>
                                    <button class="btn btn-primary mt-2" @onclick="DownloadResults">
                                        <i class="bi bi-file-text"></i> Download Results
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string selectedImagePath = string.Empty;
    private bool isAnalyzing = false;
    private string userEmail = string.Empty;
    private int analysisProgress = 0;
    private string analysisStatus = "Initializing analysis...";
    private ClassificationResult? ClassificationResults { get; set; }
    private IBrowserFile? uploadedFile;
    private CancellationTokenSource? cts;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            uploadedFile = e.File;
            var imageFile = e.File;
            
            // Reset previous results
            ClassificationResults = null;
            analysisProgress = 0;

            // Convert the uploaded file to a data URL for display
            var buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream().ReadAsync(buffer);
            var imageBase64 = Convert.ToBase64String(buffer);
            selectedImagePath = $"data:{imageFile.ContentType};base64,{imageBase64}";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading image: {ex.Message}");
        }
    }

    private async Task AnalyzeImage()
    {
        if (uploadedFile == null) return;

        isAnalyzing = true;
        ClassificationResults = null;
        analysisProgress = 0;
        StateHasChanged();

        try
        {
            // Save the uploaded file
            var tempFileName = $"temp_{Guid.NewGuid()}.jpg";
            var tempPath = Path.Combine(Path.GetTempPath(), tempFileName);
            await using (var fs = new FileStream(tempPath, FileMode.Create))
            {
                await uploadedFile.OpenReadStream().CopyToAsync(fs);
            }

            analysisStatus = "Running model inference...";
            StateHasChanged();

            // Set up the process with a longer timeout
            using var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "python3",
                    Arguments = $"\"{Path.Combine("predictor", "Local_data_for_model", "classify_image.py")}\" \"{tempPath}\" --model \"{Path.Combine("predictor", "Local_data_for_model", "best_model.pth")}\"",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                }
            };

            // Start the process with a 60-second timeout
            var cts = new CancellationTokenSource(TimeSpan.FromSeconds(60));
            
            try
            {
                process.Start();
                
                // Read output asynchronously
                var outputTask = process.StandardOutput.ReadToEndAsync();
                var errorTask = process.StandardError.ReadToEndAsync();

                // Update progress while waiting
                while (!process.HasExited)
                {
                    if (analysisProgress < 90)
                    {
                        analysisProgress += 5;
                        StateHasChanged();
                    }
                    await Task.Delay(1000);
                }

                string output = await outputTask;
                string error = await errorTask;

                if (process.ExitCode == 0)
                {
                    ParsePythonOutput(output);
                    analysisProgress = 100;
                    analysisStatus = "Analysis complete!";
                }
                else
                {
                    throw new Exception($"Python process failed: {error}");
                }
            }
            catch (OperationCanceledException)
            {
                process.Kill(true);
                throw new TimeoutException("Analysis timed out after 60 seconds");
            }
            finally
            {
                if (File.Exists(tempPath))
                {
                    File.Delete(tempPath);
                }
            }
        }
        catch (Exception ex)
        {
            analysisStatus = $"Error: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", $"Error analyzing image: {ex.Message}");
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private void ParsePythonOutput(string output)
    {
        try
        {
            Console.WriteLine($"Raw Python output: {output}"); // Debug line
            var lines = output.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            var result = new ClassificationResult();

            foreach (var line in lines)
            {
                Console.WriteLine($"Processing line: {line}"); // Debug line
                if (line.StartsWith("Prediction:"))
                    result.Prediction = line.Split(':')[1].Trim();
                else if (line.StartsWith("Snow Probability:"))
                    result.SnowProbability = double.Parse(line.Split(':')[1].Trim().TrimEnd('%')) / 100;
                else if (line.StartsWith("No Snow Probability:"))
                    result.NoSnowProbability = double.Parse(line.Split(':')[1].Trim().TrimEnd('%')) / 100;
            }

            ClassificationResults = result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing Python output: {ex.Message}");
            throw;
        }
    }

    private class ClassificationResult
    {
        public string Prediction { get; set; } = "";
        public double Confidence { get; set; }
        public double SnowProbability { get; set; }
        public double NoSnowProbability { get; set; }
    }

    private async Task DownloadImage()
    {
        if (uploadedFile != null)
        {
            var fileName = uploadedFile.Name;
            await JSRuntime.InvokeVoidAsync("downloadFile", selectedImagePath, fileName);
        }
    }

    private async Task DownloadResults()
    {
        if (ClassificationResults != null)
        {
            var results = $"Snow Analysis Results\n" +
                         $"Prediction: {ClassificationResults.Prediction}\n" +
                         $"Snow Probability: {ClassificationResults.SnowProbability:P1}\n" +
                         $"No Snow Probability: {ClassificationResults.NoSnowProbability:P1}\n";

            var bytes = System.Text.Encoding.UTF8.GetBytes(results);
            var base64 = Convert.ToBase64String(bytes);
            await JSRuntime.InvokeVoidAsync("downloadFile", 
                $"data:text/plain;base64,{base64}", 
                "snow_analysis_results.txt");
        }
    }

    public void Dispose()
    {
        cts?.Cancel();
        cts?.Dispose();
    }
}