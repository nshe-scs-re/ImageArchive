@page "/ML"
@using System.Diagnostics
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h2 class="text-center mb-0">Snow Prediction Tool</h2>
        </div>
        <div class="card-body">
            <div class="form-group text-center">
                <InputFile OnChange="@HandleFileSelected" class="form-control mb-3" accept="image/*" />
                
                @if (!string.IsNullOrEmpty(selectedImagePath))
                {
                    <div class="mt-3">
                        <img src="@selectedImagePath" class="img-fluid rounded mb-3" style="max-height: 300px;" alt="Selected image" />
                    </div>
                }

                <button class="btn btn-primary" @onclick="AnalyzeImage" disabled="@(uploadedFile == null || isAnalyzing)">
                    @if (isAnalyzing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Analyzing...</span>
                    }
                    else
                    {
                        <span>Analyze Image</span>
                    }
                </button>
            </div>

            @if (isAnalyzing || !string.IsNullOrEmpty(analysisStatus))
            {
                <div class="mt-3">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" 
                             style="width: @(analysisProgress)%">
                            @analysisProgress%
                        </div>
                    </div>
                    <p class="text-center mt-2 @(analysisStatus.StartsWith("Error") ? "text-danger" : "text-info")">
                        @analysisStatus
                    </p>
                </div>
            }

            @if (ClassificationResults != null)
            {
                <div class="mt-4">
                    <div class="card">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Analysis Results</h5>
                        </div>
                        <div class="card-body">
                            <div class="alert @(ClassificationResults.Prediction == "Has Snow" ? "alert-info" : "alert-warning")">
                                <strong>Prediction:</strong> @ClassificationResults.Prediction
                            </div>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-info" 
                                     role="progressbar" 
                                     style="width: @(ClassificationResults.SnowProbability * 100)%">
                                    Snow: @(ClassificationResults.SnowProbability.ToString("P1"))
                                </div>
                            </div>
                            <div class="progress">
                                <div class="progress-bar bg-warning" 
                                     role="progressbar" 
                                     style="width: @(ClassificationResults.NoSnowProbability * 100)%">
                                    No Snow: @(ClassificationResults.NoSnowProbability.ToString("P1"))
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IBrowserFile? uploadedFile;
    private string selectedImagePath = string.Empty;
    private bool isAnalyzing = false;
    private int analysisProgress = 0;
    private string analysisStatus = string.Empty;
    private ClassificationResult? ClassificationResults;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            uploadedFile = e.File;
            var format = "image/jpeg";
            var resizedImage = await e.File.RequestImageFileAsync(format, 800, 600);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            selectedImagePath = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            analysisStatus = "Image loaded. Click 'Analyze Image' to begin.";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            analysisStatus = $"Error loading image: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading image: {ex.Message}");
        }
    }

    private async Task AnalyzeImage()
    {
        if (uploadedFile == null) return;

        isAnalyzing = true;
        ClassificationResults = null;
        analysisProgress = 0;
        analysisStatus = "Starting analysis...";
        StateHasChanged();

        try
        {
            // Save image to temp file
            analysisStatus = "Saving temporary image...";
            analysisProgress = 10;
            StateHasChanged();
            
            var tempFileName = $"temp_{Guid.NewGuid()}.jpg";
            var tempPath = Path.Combine(Path.GetTempPath(), tempFileName);
            
            await using (var stream = new FileStream(tempPath, FileMode.Create))
            {
                await uploadedFile.OpenReadStream().CopyToAsync(stream);
            }

            // Get paths
            analysisStatus = "Locating model files...";
            analysisProgress = 20;
            StateHasChanged();

            var solutionRoot = Directory.GetParent(Directory.GetCurrentDirectory())?.Parent?.FullName;
            if (solutionRoot == null)
            {
                throw new DirectoryNotFoundException("Could not find solution root directory");
            }

            var scriptPath = Path.Combine(solutionRoot, "predictor", "Local_data_for_model", "classify_image.py");
            var modelPath = Path.Combine(solutionRoot, "predictor", "Local_data_for_model", "best_model.pth");

            // Verify files exist
            if (!File.Exists(scriptPath))
            {
                throw new FileNotFoundException($"Python script not found at: {scriptPath}");
            }
            if (!File.Exists(modelPath))
            {
                throw new FileNotFoundException($"Model file not found at: {modelPath}");
            }

            // Run Python script
            analysisStatus = "Running snow detection model...";
            analysisProgress = 40;
            StateHasChanged();

            using var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "python3",
                    Arguments = $"\"{scriptPath}\" \"{tempPath}\" --model \"{modelPath}\"",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                }
            };

            process.Start();
            analysisProgress = 60;
            analysisStatus = "Processing image...";
            StateHasChanged();

            var output = await process.StandardOutput.ReadToEndAsync();
            var error = await process.StandardError.ReadToEndAsync();

            if (!string.IsNullOrEmpty(error))
            {
                Console.WriteLine($"Python Error: {error}");
            }

            await process.WaitForExitAsync();

            if (process.ExitCode != 0)
            {
                throw new Exception($"Python script failed: {error}");
            }

            // Parse the output
            analysisStatus = "Processing results...";
            analysisProgress = 80;
            StateHasChanged();

            foreach (var line in output.Split('\n'))
            {
                if (line.StartsWith("Prediction:"))
                    ClassificationResults = new ClassificationResult { Prediction = line.Split(':')[1].Trim() };
                else if (line.StartsWith("Snow Probability:"))
                    ClassificationResults.SnowProbability = double.Parse(line.Split(':')[1].Trim().TrimEnd('%')) / 100;
                else if (line.StartsWith("No Snow Probability:"))
                    ClassificationResults.NoSnowProbability = double.Parse(line.Split(':')[1].Trim().TrimEnd('%')) / 100;
            }

            analysisProgress = 100;
            analysisStatus = "Analysis complete!";

            // Cleanup
            if (File.Exists(tempPath))
            {
                File.Delete(tempPath);
            }
        }
        catch (Exception ex)
        {
            analysisStatus = $"Error: {ex.Message}";
            analysisProgress = 0;
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            Console.WriteLine($"Error in AnalyzeImage: {ex}");
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private class ClassificationResult
    {
        public string Prediction { get; set; } = "";
        public double SnowProbability { get; set; }
        public double NoSnowProbability { get; set; }
    }
}