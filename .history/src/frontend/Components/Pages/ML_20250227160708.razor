@page "/ML"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h2 class="text-center mb-0">Snow Prediction Tool</h2>
        </div>
        <div class="card-body">
            <div class="form-group text-center">
                <InputFile OnChange="@HandleFileSelected" class="form-control mb-3" accept="image/*" />
                
                @if (!string.IsNullOrEmpty(selectedImagePath))
                {
                    <div class="mt-3">
                        <img src="@selectedImagePath" class="img-fluid rounded mb-3" style="max-height: 300px;" alt="Selected image" />
                    </div>
                }

                <button class="btn btn-primary" @onclick="AnalyzeImage" disabled="@(uploadedFile == null || isAnalyzing)">
                    @if (isAnalyzing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Analyzing...</span>
                    }
                    else
                    {
                        <span>Analyze Image</span>
                    }
                </button>
            </div>

            @if (isAnalyzing)
            {
                <div class="mt-3">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" 
                             style="width: @(analysisProgress)%">
                            @analysisProgress%
                        </div>
                    </div>
                    <p class="text-center mt-2">@analysisStatus</p>
                </div>
            }

            @if (ClassificationResults != null)
            {
                <div class="mt-4">
                    <div class="card">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Analysis Results</h5>
                        </div>
                        <div class="card-body">
                            <div class="alert @(ClassificationResults.Prediction == "Has Snow" ? "alert-info" : "alert-warning")">
                                <strong>Prediction:</strong> @ClassificationResults.Prediction
                            </div>
                            <div class="progress mb-3">
                                <div class="progress-bar bg-info" 
                                     role="progressbar" 
                                     style="width: @(ClassificationResults.SnowProbability * 100)%">
                                    Snow: @(ClassificationResults.SnowProbability.ToString("P1"))
                                </div>
                            </div>
                            <div class="progress">
                                <div class="progress-bar bg-warning" 
                                     role="progressbar" 
                                     style="width: @(ClassificationResults.NoSnowProbability * 100)%">
                                    No Snow: @(ClassificationResults.NoSnowProbability.ToString("P1"))
                                </div>
                            </div>
                            <button class="btn btn-secondary mt-3" @onclick="DownloadResults">
                                <i class="bi bi-download"></i> Download Results
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IBrowserFile? uploadedFile;
    private string selectedImagePath = string.Empty;
    private bool isAnalyzing = false;
    private int analysisProgress = 0;
    private string analysisStatus = string.Empty;
    private ClassificationResult? ClassificationResults;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            uploadedFile = e.File;
            var format = "image/jpeg";
            var resizedImage = await e.File.RequestImageFileAsync(format, 800, 600);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            selectedImagePath = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading image: {ex.Message}");
        }
    }

    private async Task AnalyzeImage()
    {
        if (uploadedFile == null) return;

        isAnalyzing = true;
        ClassificationResults = null;
        analysisProgress = 0;
        analysisStatus = "Submitting image for analysis...";
        StateHasChanged();

        try
        {
            // Create form data
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(uploadedFile.OpenReadStream());
            content.Add(fileContent, "file", uploadedFile.Name);

            // Submit image
            var response = await Http.PostAsync("api/ImageAnalysis", content);
            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"Failed to submit image: {response.StatusCode}");
            }

            var jobResult = await response.Content.ReadFromJsonAsync<JobResponse>();
            if (jobResult?.JobId == null)
            {
                throw new Exception("Failed to get job ID");
            }

            analysisStatus = "Processing image...";
            analysisProgress = 25;
            StateHasChanged();

            // Poll for results
            var attempts = 0;
            while (attempts < 30) // 30 second timeout
            {
                var resultResponse = await Http.GetAsync($"api/ImageAnalysis/{jobResult.JobId}");
                if (resultResponse.IsSuccessStatusCode)
                {
                    var result = await resultResponse.Content.ReadFromJsonAsync<ImageAnalysisResult>();
                    if (result != null)
                    {
                        ClassificationResults = new ClassificationResult
                        {
                            Prediction = result.Prediction,
                            SnowProbability = result.SnowProbability,
                            NoSnowProbability = result.NoSnowProbability
                        };
                        analysisProgress = 100;
                        analysisStatus = "Analysis complete!";
                        break;
                    }
                }

                attempts++;
                analysisProgress = Math.Min(90, 25 + (attempts * 2));
                StateHasChanged();
                await Task.Delay(1000);
            }

            if (ClassificationResults == null)
            {
                throw new Exception("Analysis timed out");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            analysisStatus = $"Error: {ex.Message}";
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private async Task DownloadResults()
    {
        if (ClassificationResults != null)
        {
            var results = $"Snow Analysis Results\n" +
                         $"Prediction: {ClassificationResults.Prediction}\n" +
                         $"Snow Probability: {ClassificationResults.SnowProbability:P1}\n" +
                         $"No Snow Probability: {ClassificationResults.NoSnowProbability:P1}\n";

            var bytes = System.Text.Encoding.UTF8.GetBytes(results);
            var base64 = Convert.ToBase64String(bytes);
            await JSRuntime.InvokeVoidAsync("downloadFile", 
                $"data:text/plain;base64,{base64}", 
                "snow_analysis_results.txt");
        }
    }

    private class JobResponse
    {
        public string? JobId { get; set; }
    }

    private class ClassificationResult
    {
        public string Prediction { get; set; } = "";
        public double SnowProbability { get; set; }
        public double NoSnowProbability { get; set; }
    }
}