@page "/"
@attribute [StreamRendering]
@inject HttpService HttpService
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<div class="text-center mb-4">
    <a href="/ML" class="btn btn-primary btn-lg">
        <i class="bi bi-robot"></i> Snow Prediction Tool
    </a>
</div>

<div class="accordion accordion-flush">
  <div class="accordion-item my-3 py-3 text-center rounded @GetTheme()">
    <div class="row">
      <div class="col-lg-6 col-md-8 mx-auto">
        <h1 class="accordion-header py-2">
          <button class="accordion-button rounded @GetAccordionTheme()" type="button" data-bs-toggle="collapse" data-bs-target="#QueryFormContainer">
            <h1 class="w-100 text-center">Image Repository Search</h1>
          </button>
        </h1>
      </div>
    </div>
    <div id="QueryFormContainer" class="accordion-collapse collapse show row row-cols-1 row-cols-md-2 row-cols-lg-3">
      <div class="accordion-body col mx-auto border">
        <p class="lead">Execute a query against the image repository by using the tool below.</p>
        <EditForm Model="@imageQuery" OnValidSubmit="GetImagesByPageAsync" FormName="ImageQueryForm" class="form">
          <div class="row py-2">
            <label for="StartDate" class="col col-form-label">Query start date:</label>
            <div class="col">
              <InputDate id="StartDate" @bind-Value="imageQuery.StartDateTime" Type="InputDateType.Date" class="form-control" />
            </div>
          </div>
          <div class="row py-2">
            <label for="EndDate" class="col col-form-label">Query end date:</label>
            <div class="col">
              <InputDate id="EndDate" @bind-Value="imageQuery.EndDateTime" Type="InputDateType.Date" class="form-control" />
            </div>
          </div>
          <div class="row py-2">
            <label for="StartTime" class="col col-form-label">Query start time:</label>
            <div class="col">
              <InputDate id="StartTime" @bind-Value="imageQuery.StartTimeOnly" Type="InputDateType.Time" class="form-control" />
            </div>
          </div>
          <div class="row py-2">
            <label for="EndTime" class="col col-form-label">Query end time:</label>
            <div class="col">
              <InputDate id="EndTime" @bind-Value="imageQuery.EndTimeOnly" Type="InputDateType.Time" class="form-control" />
            </div>
          </div>
          <div class="row py-2">
            <label for="Site" class="col col-form-label">Site Name:</label>
            <div class="col">
              <select value=@imageQuery.SiteName @onchange=OnSiteNameChanged id="SiteName" class="form-select">
                <option value="Rockland">Rockland</option>
                <option value="Sheep">Sheep</option>
                <option value="Snake">Snake</option>
                <option value="Spring">Spring</option>
                <option value="Eldorado">Eldorado</option>
              </select>
            </div>
          </div>
          <div class="row py-2">
            <label for="Site" class="col col-form-label">Site Number:</label>
            <div class="col">
              <select value="imageQuery.SiteNumber" @onchange=OnSiteNumberChanged id ="SiteNumber" class="form-select">
                @foreach(var siteNumber in SiteNumbers)
                {
                  <option value="@siteNumber">@siteNumber</option>
                }
              </select>
            </div>
          </div>
          <div class="row py-2">
            <label for="CameraNumber" class="col col-form-label">Camera Number:</label>
            <div class="col">
              <InputSelect @bind-Value="imageQuery.CameraNumber" id="CameraNumber" class="form-select">
                <option value="1">Camera 1</option>
                <option value="2">Camera 2</option>
                <option value="3">Camera 3</option>
              </InputSelect>
            </div>
          </div>
          <div class="row py-2">
            <label for="CameraPosition" class="col col-form-label">Camera Position:</label>
            <div class="col">
              <InputSelect @bind-Value="imageQuery.CameraPosition" id="CameraPosition" class="form-select">
                @foreach (var item in cameraPositions)
                {
                  <option value="@item.Value">@item.PositionName</option>
                }
              </InputSelect>
            </div>
          </div>
          @if(loading)
          {
            <div class="text-end py-2">
              <button type="button" class="btn btn-light rounded custom-btn-fixed-size-sm @GetButtonTheme()" disabled><span class="spinner-border"></span></button>
            </div>
          }
          else
          {
            <div class="text-end py-2">
              <button type="submit" class="btn btn-light rounded custom-btn-fixed-size-sm @GetButtonTheme()" data-bs-toggle="collapse" data-bs-target="#QueryFormContainer">Search</button>
            </div>
          }
        </EditForm>
      </div>
    </div>
  </div>
</div>

@if (querySubmitted && loading)
{
  <div class="my-3 py-3 album rounded @GetTheme()">
    <div class="container">
      <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
        @for (int i = 0; i < pageSize; i++)
        {
          <div class="col">
            <div class="card shadow-sm @GetTheme()">
              <img src="/placeholder.jpg" class="card-img-top" width="320" height="240" />
              <div class="card-body">
                <p class="card-text">Time: </p>
                <p class="card-text">Site Name: </p>
                <p class="card-text">Site Number: </p>
                <p class="card-text">Camera Number: </p>
                <p class="card-text">Camera Position Number: </p>
                <p class="card-text">Camera Postion Name: </p>
                <div class="d-flex justify-content-between align-items-center">
                  <div class="btn-group">
                    <button type="button" class="disabled btn btn-sm btn-light @GetButtonTheme()">View</button>
                    <button type="button" class="disabled btn btn-sm btn-light @GetButtonTheme()">Download</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        }
      </div>
    </div>
  </div>
}
else if (querySubmitted && !loading)
{
  <div class="my-3 py-3 album rounded @GetTheme()">
    <div class="container">
      <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
        @foreach (var image in images!)
        {
          <div class="col">
            <div class="card shadow-sm @GetTheme()">
              <img src="/api/images/@image.Id" class="card-img-top" width="320" height="240" />
              <div class="card-body">
                <p class="card-text">Time: @image.DateTime</p>
                <p class="card-text">Site Name: @image.SiteName</p>
                <p class="card-text">Site Number: @image.SiteNumber</p>
                <p class="card-text">Camera Number: @image.CameraNumber</p>
                <p class="card-text">Camera Position Number: @image.CameraPositionNumber</p>
                <p class="card-text">Camera Postion Name: @image.CameraPositionName</p>
                <div class="d-flex justify-content-between align-items-center">
                  <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-light @GetButtonTheme()" @onclick="() => UpdateImageSrc(image.Id)" data-bs-toggle="modal" data-bs-target="#view-image-modal">View</button>
                    <button type="button" class="btn btn-sm btn-light @GetButtonTheme()" @onclick="() => DownloadImage(image)">Download</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        }
      </div>
    </div>
  </div>

  <div>
    <ul class="pagination justify-content-center">
      <li class="page-item @(pageIndex==0 ? "disabled" : "")">
        <button type="button" class="page-link @GetButtonTheme()" @onclick="FirstPage">
          <i class="bi bi-chevron-bar-left"></i>
        </button>
      </li>
      <li class="page-item">
        <button type="button" class="page-link @GetButtonTheme()" @onclick="PreviousPage">
          <i class="bi bi-chevron-left"></i>
        </button>
      </li>
      <li class="page-item">
        <input type="number" min="0" max="@totalPages" class="page-link text-center @GetButtonTheme()" value="@pageIndex" @onchange="UpdatePaginationAsync"/> 
      </li>
      <li class="page-item">
        <button type="button" class="page-link @GetButtonTheme()" @onclick="NextPage">
          <i class="bi bi-chevron-right"></i>
        </button>
      </li>
      <li class="page-item @(pageIndex==totalPages ? "disabled" : "")">
        <button type="button" class="page-link @GetButtonTheme()" @onclick="LastPage">
          <i class="bi bi-chevron-bar-right"></i>
        </button>
      </li>
    </ul>
  </div>
}

<div class="modal fade" id="view-image-modal" tabindex="-1">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-center">
        <img src="@imageSrc"/>
      </div>
    </div>
  </div>
</div>

@code
{
    private ImageQuery imageQuery = new();
    private bool loading = false;
    private bool querySubmitted = false;
    private List<Image>? images = new();
    private int pageIndex = 0;
    private int pageSize = 9;
    private int totalImages = 0;
    private int totalPages = 0;
    private string imageSrc = string.Empty;

    List<CameraPositionEntry> cameraPositions = CameraPositions.Positions.Where(p => p.SiteName == "Rockland" && p.SiteNumber == 1).ToList();

    private Dictionary<string, List<int>> SiteNameToSiteNumbersMap = new()
    {
        { "Eldorado", new List<int>{ 3 }},
        { "Sheep", new List<int>{ 1, 2, 3, 4 }},
        { "Snake", new List<int>{ 1, 2, 3 }},
        { "Spring", new List<int>{ 3, 4 }},
        { "Rockland", new List<int>{ 1 }}
    };
    private List<int> SiteNumbers = new List<int>{ 1 };

    private void OnSiteNameChanged(ChangeEventArgs e)
    {
        var selectedSite = e.Value?.ToString();
        if(!string.IsNullOrEmpty(selectedSite))
        {
            if (imageQuery.SiteName != selectedSite)
            {
                imageQuery.SiteName = selectedSite;
            }

            if (SiteNameToSiteNumbersMap.ContainsKey(selectedSite))
            {
                SiteNumbers = SiteNameToSiteNumbersMap[selectedSite];
                imageQuery.SiteNumber = SiteNumbers.Min();
            }

            cameraPositions = CameraPositions.Positions
                .Where(p =>
                  p.SiteName == imageQuery.SiteName && 
                  p.SiteNumber == imageQuery.SiteNumber)
                .ToList();

            imageQuery.CameraPosition = cameraPositions.Min(p => p.Value);
        }
    }

    private void OnSiteNumberChanged(ChangeEventArgs e)
    {
        var siteNumberString = e.Value?.ToString();
        int.TryParse(siteNumberString, out int siteNumber);

        if (imageQuery.SiteNumber != siteNumber)
        {
            imageQuery.SiteNumber = siteNumber;
        }

        cameraPositions = CameraPositions.Positions
            .Where(p =>
              p.SiteName == imageQuery.SiteName && 
              p.SiteNumber == imageQuery.SiteNumber)
            .ToList();
    }

    protected override void OnInitialized()
    {
        ThemeService.StateChanged += StateHasChanged;
    }

    private async Task GetImagesByPageAsync()
    {
        imageQuery.StartDateTime = new DateTime(DateOnly.FromDateTime(imageQuery.StartDateTime), imageQuery.StartTimeOnly);
        imageQuery.EndDateTime = new DateTime(DateOnly.FromDateTime(imageQuery.EndDateTime), imageQuery.EndTimeOnly);

        querySubmitted = true;
        loading = true;

        var response = await HttpService.GetImagesByPageAsync(imageQuery.StartDateTime, imageQuery.EndDateTime, pageIndex, pageSize, imageQuery.SiteName, imageQuery.SiteNumber, imageQuery.CameraPosition);

        if(response is not null)
        {
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadFromJsonAsync<PaginationResponse>();
                images = responseContent.Images;
                totalImages = responseContent.TotalCount;
                totalPages = totalImages / pageSize;
            }
        }
        loading = false;
    }

    private async Task FirstPage()
    {
        pageIndex = 0;
        await GetImagesByPageAsync();
    }

    private async Task NextPage()
    {
        pageIndex++;
        await GetImagesByPageAsync();
    }

    private async Task PreviousPage()
    {
        if (pageIndex > 0)
        {
            pageIndex--;
            await GetImagesByPageAsync();
        }
    }

    private async Task LastPage()
    {
        pageIndex = totalPages;
        await GetImagesByPageAsync();
    }

    private string GetTheme()
    {
        return ThemeService.State? "bg-body-tertiary" : "custom-color-bg-dm-secondary";
    }

    private string GetButtonTheme()
    {
        return ThemeService.State ? "btn-outline-secondary" : "custom-color-btn-dm-border";
    }

    private string GetAccordionTheme()
    {
        return ThemeService.State ? "custom-theme-light" : "custom-theme-dark";
    }

    public void Dispose()
    {
        ThemeService.StateChanged -= StateHasChanged;
    }

    private async Task UpdatePaginationAsync(ChangeEventArgs e)
    {
        try
        {
            if(int.TryParse(e.Value.ToString(), out int inputValue))
            {
                pageIndex = Math.Clamp(inputValue, 0, totalPages);
                await GetImagesByPageAsync();
            }
        }
        catch (Exception exception)
        {
            Console.WriteLine($"ERROR [Home.razor] [PaginationChangedAsync]: {exception.Message}");
            throw;
        }
    }
    
    private async Task DownloadImage(Image image)
    {
        var url = $"/api/images/{image.Id}";

        await JSRuntime.InvokeVoidAsync("download", url, $"{image.UnixTime}.jpg");
    }

    private void UpdateImageSrc(long Id)
    {
        imageSrc = $"/api/images/{Id}";
    }
}