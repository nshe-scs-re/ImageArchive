@page "/ML"
@using System.Diagnostics
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2 class="text-center mb-0">Snow Prediction Tool</h2>
        </div>
        <div class="card-body">
            <div class="form-group text-center">
                <InputFile OnChange="@HandleFileSelected" class="form-control mb-3" accept="image/*" />
                
                <button class="btn btn-primary" @onclick="AnalyzeImage" disabled="@(uploadedFile == null || isAnalyzing)">
                    @if (isAnalyzing)
                    {
                        <span class="spinner-border spinner-border-sm mr-2" role="status" aria-hidden="true"></span>
                        <span>Analyzing...</span>
                    }
                    else
                    {
                        <span>Analyze Image</span>
                    }
                </button>
            </div>

            @if (!string.IsNullOrEmpty(analysisStatus))
            {
                <p class="text-center mt-3 @(analysisStatus.StartsWith("Error") ? "text-danger" : "text-info")">
                    @analysisStatus
                </p>
            }

            @if (ClassificationResults != null)
            {
                <div class="mt-4">
                    <div class="alert @(ClassificationResults.Prediction == "Has Snow" ? "alert-info" : "alert-warning")">
                        <strong>Prediction:</strong> @ClassificationResults.Prediction
                        <br />
                        <strong>Snow Probability:</strong> @(ClassificationResults.SnowProbability.ToString("P1"))
                        <br />
                        <strong>No Snow Probability:</strong> @(ClassificationResults.NoSnowProbability.ToString("P1"))
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IBrowserFile? uploadedFile;
    private bool isAnalyzing = false;
    private string analysisStatus = string.Empty;
    private ClassificationResult? ClassificationResults;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        analysisStatus = "Image loaded. Click 'Analyze Image' to begin.";
        StateHasChanged();
    }

    private async Task AnalyzeImage()
    {
        if (uploadedFile == null) return;

        isAnalyzing = true;
        ClassificationResults = null;
        analysisStatus = "Analyzing image...";
        StateHasChanged();

        try
        {
            // Create a multipart form content to send the image
            using var content = new MultipartFormDataContent();
            using var imageContent = new StreamContent(uploadedFile.OpenReadStream(maxAllowedSize: 10485760)); // 10MB max
            
            // Add the file to the form
            content.Add(
                content: imageContent,
                name: "\"image\"",
                fileName: uploadedFile.Name);

            // Send the request to the API endpoint
            var response = await Http.PostAsync("api/ml/analyze", content);
            
            // Check if the request was successful
            if (!response.IsSuccessStatusCode)
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                throw new Exception($"API request failed: {errorMessage}");
            }

            // Parse the response
            var result = await response.Content.ReadFromJsonAsync<ClassificationResult>();
            if (result != null)
            {
                ClassificationResults = result;
                analysisStatus = "Analysis complete!";
            }
            else
            {
                throw new Exception("Failed to parse the analysis results");
            }
        }
        catch (Exception ex)
        {
            analysisStatus = $"Error: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private class ClassificationResult
    {
        public string Prediction { get; set; } = "";
        public double SnowProbability { get; set; }
        public double NoSnowProbability { get; set; }
    }
}