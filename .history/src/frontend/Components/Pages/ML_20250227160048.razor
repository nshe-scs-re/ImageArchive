@page "/ML"
@using System.Diagnostics
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h2 class="text-center mb-0">Snow Prediction Tool</h2>
        </div>
        <div class="card-body">
            <!-- File Upload -->
            <div class="form-group text-center">
                <InputFile OnChange="@HandleFileSelected" class="form-control mb-3" accept="image/*" />
                
                @if (!string.IsNullOrEmpty(selectedImagePath))
                {
                    <div class="mt-3">
                        <img src="@selectedImagePath" class="img-fluid rounded mb-3" style="max-height: 300px;" alt="Selected image" />
                    </div>
                }

                <!-- Email Input -->
                <div class="form-group mb-3">
                    <input type="email" 
                           class="form-control" 
                           placeholder="Enter email for results (optional)" 
                           @bind="userEmail" />
                </div>

                <button class="btn btn-primary" @onclick="AnalyzeImage" disabled="@(string.IsNullOrEmpty(selectedImagePath) || isAnalyzing)">
                    @if (isAnalyzing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Analyzing...</span>
                    }
                    else
                    {
                        <span>Analyze Image</span>
                    }
                </button>
            </div>

            <!-- Progress Bar -->
            @if (isAnalyzing)
            {
                <div class="mt-3">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" 
                             style="width: @(analysisProgress)%">
                            @analysisProgress%
                        </div>
                    </div>
                    <p class="text-center mt-2">@analysisStatus</p>
                </div>
            }

            <!-- Results Section -->
            @if (ClassificationResults != null)
            {
                <div class="mt-4">
                    <div class="card">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Analysis Results</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>Selected Image:</h6>
                                    <img src="@selectedImagePath" class="img-fluid rounded" alt="Selected image" />
                                    <button class="btn btn-secondary mt-2" @onclick="DownloadImage">
                                        <i class="bi bi-download"></i> Download Image
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <div class="alert @(ClassificationResults.Prediction == "Has Snow" ? "alert-info" : "alert-warning")">
                                        <strong>Prediction:</strong> @ClassificationResults.Prediction
                                    </div>
                                    <div class="progress mb-3">
                                        <div class="progress-bar bg-info" 
                                             role="progressbar" 
                                             style="width: @(ClassificationResults.SnowProbability * 100)%">
                                            Snow: @(ClassificationResults.SnowProbability.ToString("P1"))
                                        </div>
                                    </div>
                                    <div class="progress mb-3">
                                        <div class="progress-bar bg-warning" 
                                             role="progressbar" 
                                             style="width: @(ClassificationResults.NoSnowProbability * 100)%">
                                            No Snow: @(ClassificationResults.NoSnowProbability.ToString("P1"))
                                        </div>
                                    </div>
                                    <button class="btn btn-primary mt-2" @onclick="DownloadResults">
                                        <i class="bi bi-file-text"></i> Download Results
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string selectedImagePath = string.Empty;
    private bool isAnalyzing = false;
    private string userEmail = string.Empty;
    private int analysisProgress = 0;
    private string analysisStatus = "Initializing analysis...";
    private ClassificationResult? ClassificationResults { get; set; }
    private IBrowserFile? uploadedFile;
    private CancellationTokenSource? cts;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            uploadedFile = e.File;
            var imageFile = e.File;
            
            // Reset previous results
            ClassificationResults = null;
            analysisProgress = 0;

            // Convert the uploaded file to a data URL for display
            var buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream().ReadAsync(buffer);
            var imageBase64 = Convert.ToBase64String(buffer);
            selectedImagePath = $"data:{imageFile.ContentType};base64,{imageBase64}";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading image: {ex.Message}");
        }
    }

    private async Task AnalyzeImage()
    {
        if (uploadedFile == null) return;

        isAnalyzing = true;
        ClassificationResults = null;
        analysisProgress = 0;
        StateHasChanged();

        try
        {
            // Submit image for analysis
            using var content = new MultipartFormDataContent();
            using var stream = uploadedFile.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            content.Add(new ByteArrayContent(ms.ToArray()), "file", uploadedFile.Name);

            var response = await Http.PostAsync("api/ImageAnalysis", content);
            var jobResult = await response.Content.ReadFromJsonAsync<JobResponse>();
            var jobId = jobResult?.JobId;

            // Poll for results
            while (isAnalyzing && jobId != null)
            {
                var resultResponse = await Http.GetAsync($"api/ImageAnalysis/{jobId}");
                if (resultResponse.IsSuccessStatusCode)
                {
                    var result = await resultResponse.Content.ReadFromJsonAsync<ImageAnalysisResult>();
                    if (result != null)
                    {
                        ClassificationResults = new ClassificationResult
                        {
                            Prediction = result.Prediction,
                            SnowProbability = result.SnowProbability,
                            NoSnowProbability = result.NoSnowProbability
                        };
                        break;
                    }
                }

                if (analysisProgress < 90)
                    analysisProgress += 5;
                
                StateHasChanged();
                await Task.Delay(1000);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private class ClassificationResult
    {
        public string Prediction { get; set; } = "";
        public double Confidence { get; set; }
        public double SnowProbability { get; set; }
        public double NoSnowProbability { get; set; }
    }

    private async Task DownloadImage()
    {
        if (uploadedFile != null)
        {
            var fileName = uploadedFile.Name;
            await JSRuntime.InvokeVoidAsync("downloadFile", selectedImagePath, fileName);
        }
    }

    private async Task DownloadResults()
    {
        if (ClassificationResults != null)
        {
            var results = $"Snow Analysis Results\n" +
                         $"Prediction: {ClassificationResults.Prediction}\n" +
                         $"Snow Probability: {ClassificationResults.SnowProbability:P1}\n" +
                         $"No Snow Probability: {ClassificationResults.NoSnowProbability:P1}\n";

            var bytes = System.Text.Encoding.UTF8.GetBytes(results);
            var base64 = Convert.ToBase64String(bytes);
            await JSRuntime.InvokeVoidAsync("downloadFile", 
                $"data:text/plain;base64,{base64}", 
                "snow_analysis_results.txt");
        }
    }

    public void Dispose()
    {
        cts?.Cancel();
        cts?.Dispose();
    }
}